(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["PaInputClass"],{"27d2":function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## TimePicker 时间选择器\n\n用于选择或输入日期\n\n### 固定时间点\n\n提供几个固定的时间点供用户选择\n\n:::demo 使用 pa-time-select 标签，分别通过`start`、`end`和`step`指定可选的起始时间、结束时间和步长\n\n```html\n<template>\n  <pa-time-select\n    v-model="value"\n    :picker-options="{\n        start: \'08:30\',\n        step: \'00:15\',\n        end: \'18:30\'\n      }"\n    placeholder="选择时间"\n  >\n  </pa-time-select>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 任意时间点\n\n可以选择任意时间\n\n:::demo 使用 pa-time-picker 标签，通过`selectableRange`限制可选时间范围。提供了两种交互方式：默认情况下通过鼠标滚轮进行选择，打开`arrow-control`属性则通过界面上的箭头进行选择。\n\n```html\n<template>\n  <div>\n    <pa-time-picker\n      v-model="value1"\n      :picker-options="{\n      selectableRange: \'18:30:00 - 20:30:00\'\n    }"\n      placeholder="任意时间点"\n    >\n    </pa-time-picker>\n    <pa-time-picker\n      arrow-control\n      v-model="value2"\n      :picker-options="{\n      selectableRange: \'18:30:00 - 20:30:00\'\n    }"\n      placeholder="任意时间点"\n    >\n    </pa-time-picker>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        value1: new Date(2016, 9, 10, 18, 40),\n        value2: new Date(2016, 9, 10, 18, 40),\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 固定时间范围\n\n若先选择开始时间，则结束时间内备选项的状态会随之改变\n\n:::demo\n\n```html\n<template>\n  <div>\n    <pa-time-select\n      placeholder="起始时间"\n      v-model="startTime"\n      :picker-options="{\n      start: \'08:30\',\n      step: \'00:15\',\n      end: \'18:30\'\n    }"\n    >\n    </pa-time-select>\n    <pa-time-select\n      placeholder="结束时间"\n      v-model="endTime"\n      :picker-options="{\n      start: \'08:30\',\n      step: \'00:15\',\n      end: \'18:30\',\n      minTime: startTime\n    }"\n    >\n    </pa-time-select>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        startTime: "",\n        endTime: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 任意时间范围\n\n可选择任意的时间范围\n\n:::demo 添加`is-range`属性即可选择时间范围，同样支持`arrow-control`属性。\n\n```html\n<template>\n  <div>\n    <pa-time-picker\n      is-range\n      v-model="value1"\n      range-separator="至"\n      start-placeholder="开始时间"\n      end-placeholder="结束时间"\n      placeholder="选择时间范围"\n    >\n    </pa-time-picker>\n    <pa-time-picker\n      is-range\n      arrow-control\n      v-model="value2"\n      range-separator="至"\n      start-placeholder="开始时间"\n      end-placeholder="结束时间"\n      placeholder="选择时间范围"\n    >\n    </pa-time-picker>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        value1: [new Date(2016, 9, 10, 8, 40), new Date(2016, 9, 10, 9, 40)],\n        value2: [new Date(2016, 9, 10, 8, 40), new Date(2016, 9, 10, 9, 40)],\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### Attributes\n\n| 参数              | 说明                                                                 | 类型                                  | 可选值                                                   | 默认值               |\n| ----------------- | -------------------------------------------------------------------- | ------------------------------------- | -------------------------------------------------------- | -------------------- |\n| value / v-model   | 绑定值                                                               | date(TimePicker) / string(TimeSelect) | —                                                        | —                    |\n| readonly          | 完全只读                                                             | boolean                               | —                                                        | false                |\n| disabled          | 禁用                                                                 | boolean                               | —                                                        | false                |\n| editable          | 文本框可输入                                                         | boolean                               | —                                                        | true                 |\n| clearable         | 是否显示清除按钮                                                     | boolean                               | —                                                        | true                 |\n| size              | 输入框尺寸                                                           | string                                | medium / small / mini                                    | —                    |\n| placeholder       | 非范围选择时的占位内容                                               | string                                | —                                                        | —                    |\n| start-placeholder | 范围选择时开始日期的占位内容                                         | string                                | —                                                        | —                    |\n| end-placeholder   | 范围选择时开始日期的占位内容                                         | string                                | —                                                        | —                    |\n| is-range          | 是否为时间范围选择，仅对`<pa-time-picker>`有效                       | boolean                               | —                                                        | false                |\n| arrow-control     | 是否使用箭头进行时间选择，仅对`<pa-time-picker>`有效                 | boolean                               | —                                                        | false                |\n| align             | 对齐方式                                                             | string                                | left / center / right                                    | left                 |\n| popper-class      | TimePicker 下拉框的类名                                              | string                                | —                                                        | —                    |\n| picker-options    | 当前时间日期选择器特有的选项参考下表                                 | object                                | —                                                        | {}                   |\n| range-separator   | 选择范围时的分隔符                                                   | string                                | -                                                        | \'-\'                  |\n| value-format      | 可选，仅 TimePicker 时可用，绑定值的格式。不指定则绑定值为 Date 对象 | string                                | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | —                    |\n| default-value     | 可选，选择器打开时默认显示的时间                                     | Date(TimePicker) / string(TimeSelect) | 可被`new Date()`解析(TimePicker) / 可选值(TimeSelect)    | —                    |\n| name              | 原生属性                                                             | string                                | —                                                        | —                    |\n| prefix-icon       | 自定义头部图标的类名                                                 | string                                | —                                                        | pa-icon-time         |\n| clear-icon        | 自定义清空图标的类名                                                 | string                                | —                                                        | pa-icon-circle-close |\n\n### Time Select Options\n\n| 参数    | 说明                                 | 类型   | 可选值 | 默认值 |\n| ------- | ------------------------------------ | ------ | ------ | ------ |\n| start   | 开始时间                             | string | —      | 09:00  |\n| end     | 结束时间                             | string | —      | 18:00  |\n| step    | 间隔时间                             | string | —      | 00:30  |\n| minTime | 最小时间，小于该时间的时间段将被禁用 | string | —      | 00:00  |\n| maxTime | 最大时间，大于该时间的时间段将被禁用 | string | —      | —      |\n\n### Time Picker Options\n\n| 参数            | 说明                                                                                                | 类型           | 可选值                                    | 默认值     |\n| --------------- | --------------------------------------------------------------------------------------------------- | -------------- | ----------------------------------------- | ---------- |\n| selectableRange | 可选时间段，例如`\'18:30:00 - 20:30:00\'`或者传入数组`[\'09:30:00 - 12:00:00\', \'14:30:00 - 18:30:00\']` | string / array | —                                         | —          |\n| format          | 时间格式化(TimePicker)                                                                              | string         | 小时：`HH`，分：`mm`，秒：`ss`，AM/PM `A` | \'HH:mm:ss\' |\n\n### Events\n\n| 事件名 | 说明                    | 参数       |\n| ------ | ----------------------- | ---------- |\n| change | 用户确认选定的值时触发  | 组件绑定值 |\n| blur   | 当 input 失去焦点时触发 | 组件实例   |\n| focus  | 当 input 获得焦点时触发 | 组件实例   |\n\n### Methods\n\n| 方法名 | 说明              | 参数 |\n| ------ | ----------------- | ---- |\n| focus  | 使 input 获取焦点 | -    |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},3530:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## Dialog 对话框\n\n在保留当前页面状态的情况下，告知用户并承载相关操作。\n\n### 基本用法\n\nDialog 弹出一个对话框，适合需要定制性更大的场景。\n\n:::demo 需要设置`visible`属性，它接收`Boolean`，当为`true`时显示 Dialog。Dialog 分为两个部分：`body`和`footer`，`footer`需要具名为`footer`的`slot`。`title`属性用于定义标题，它是可选的，默认值为空。最后，本例还展示了`before-close`的用法。\n\n```html\n<template>\n  <div>\n    <pa-button type="primary" @click="dialogVisible = true"\n      >点击打开 Dialog</pa-button\n    >\n    <pa-button type="primary" @click="dialogVisible1 = true"\n      >点击打开 Dialog-slot-footer</pa-button\n    >\n    <pa-dialog-s\n      title="提示"\n      :visible.sync="dialogVisible"\n      width="30%"\n      :before-close="handleClose"\n      :confirmLoading="confirmLoading"\n      custom-class="self-pa-dialog"\n      :close-on-click-modal="false"\n      :show-close="false"\n      @ok="handleOk"\n    >\n      <span>这是一段信息</span>\n    </pa-dialog-s>\n    <pa-dialog-s\n      title="提示"\n      :visible.sync="dialogVisible1"\n      width="30%"\n      :before-close="handleClose"\n      :confirmLoading="confirmLoading"\n      :footerShow="false"\n    >\n      <span>这是一段信息</span>\n      <span slot="footer" class="dialog-footer">\n        <pa-button @click="dialogVisible1 = false">取 消</pa-button>\n        <pa-button type="primary" @click="dialogVisible1 = false"\n          >确 定</pa-button\n        >\n      </span>\n    </pa-dialog-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        dialogVisible: false,\n        dialogVisible1: false,\n        confirmLoading: false,\n      };\n    },\n    methods: {\n      handleOk() {\n        this.confirmLoading = true;\n        setTimeout(() => {\n          this.confirmLoading = false;\n          this.dialogVisible = false;\n        }, 1000);\n      },\n      handleClose(done) {\n        this.$paConfirm({\n        title: "确认关闭？",\n      })\n          .then((_) => {\n            done();\n          })\n          .catch((_) => {});\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n:::tip\n`before-close` 仅当用户通过点击关闭图标或遮罩关闭 Dialog 时起效。如果你在 `footer` 具名 slot 里添加了用于关闭 Dialog 的按钮，那么可以在按钮的点击回调函数里加入 `before-close` 的相关逻辑。\n:::\n\n### 自定义内容\n\nDialog 组件的内容可以是任意的，甚至可以是表格或表单，下面是应用了 Element Table 和 Form 组件的两个样例。\n\n:::demo\n\n```html\n\x3c!-- Table --\x3e\n<template>\n  <div>\n    <pa-button type="primary" @click="dialogTableVisible = true"\n      >打开嵌套表格的 Dialog</pa-button\n    >\n\n    <pa-dialog-s\n      title="收货地址"\n      :footerShow="false"\n      :visible.sync="dialogTableVisible"\n    >\n      <pa-table :data="gridData">\n        <pa-table-column\n          property="date"\n          label="日期"\n          width="150"\n        ></pa-table-column>\n        <pa-table-column\n          property="name"\n          label="姓名"\n          width="200"\n        ></pa-table-column>\n        <pa-table-column property="address" label="地址"></pa-table-column>\n      </pa-table>\n    </pa-dialog-s>\n\n    \x3c!-- Form --\x3e\n    <pa-button type="primary" @click="dialogFormVisible = true"\n      >打开嵌套表单的 Dialog</pa-button\n    >\n\n    <pa-dialog-s\n      title="收货地址"\n      :footerShow="false"\n      :visible.sync="dialogFormVisible"\n    >\n      <el-form :model="form">\n        <el-form-item label="活动名称" :label-width="formLabelWidth">\n          <pa-input-s v-model="form.name" autocomplete="off"></pa-input-s>\n        </el-form-item>\n        <el-form-item label="活动区域" :label-width="formLabelWidth">\n          <el-select v-model="form.region" placeholder="请选择活动区域">\n            <el-option label="区域一" value="shanghai"></el-option>\n            <el-option label="区域二" value="beijing"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot="footer" class="dialog-footer">\n        <pa-button @click="dialogFormVisible = false">取 消</pa-button>\n        <pa-button type="primary" @click="dialogFormVisible = false"\n          >确 定</pa-button\n        >\n      </div>\n    </pa-dialog-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        gridData: [\n          {\n            date: "2016-05-02",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n          {\n            date: "2016-05-04",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n          {\n            date: "2016-05-01",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n          {\n            date: "2016-05-03",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n        ],\n        dialogTableVisible: false,\n        dialogFormVisible: false,\n        form: {\n          name: "",\n          region: "",\n          date1: "",\n          date2: "",\n          delivery: false,\n          type: [],\n          resource: "",\n          desc: "",\n        },\n        formLabelWidth: "120px",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 嵌套的 Dialog\n\n如果需要在一个 Dialog 内部嵌套另一个 Dialog，需要使用 `append-to-body` 属性。\n:::demo 正常情况下，我们不建议使用嵌套的 Dialog，如果需要在页面上同时显示多个 Dialog，可以将它们平级放置。对于确实需要嵌套 Dialog 的场景，我们提供了`append-to-body`属性。将内层 Dialog 的该属性设置为 true，它就会插入至 body 元素上，从而保证内外层 Dialog 和遮罩层级关系的正确。\n\n```html\n<template>\n  <div>\n    <pa-button type="primary" @click="outerVisible = true"\n      >点击打开外层 Dialog</pa-button\n    >\n\n    <pa-dialog-s\n      title="外层 Dialog"\n      :footerShow="false"\n      :visible.sync="outerVisible"\n    >\n      <pa-dialog-s\n        width="30%"\n        title="内层 Dialog"\n        :visible.sync="innerVisible"\n        append-to-body\n      >\n      </pa-dialog-s>\n      <div slot="footer" class="dialog-footer">\n        <pa-button @click="outerVisible = false">取 消</pa-button>\n        <pa-button type="primary" @click="innerVisible = true"\n          >打开内层 Dialog</pa-button\n        >\n      </div>\n    </pa-dialog-s>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        outerVisible: false,\n        innerVisible: false,\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 居中布局\n\n标题和底部可水平居中\n\n:::demo 将`center`设置为`true`即可使标题和底部居中。`center`仅影响标题和底部区域。Dialog 的内容是任意的，在一些情况下，内容并不适合居中布局。如果需要内容也水平居中，请自行为其添加 CSS。\n\n```html\n<template>\n  <div>\n    <pa-button type="primary" @click="centerDialogVisible = true"\n      >点击打开 Dialog</pa-button\n    >\n\n    <pa-dialog-s\n      title="提示"\n      :visible.sync="centerDialogVisible"\n      width="30%"\n      :footerShow="false"\n      center\n    >\n      <span>需要注意的是内容是默认不居中的</span>\n      <span slot="footer" class="dialog-footer">\n        <pa-button @click="centerDialogVisible = false">取 消</pa-button>\n        <pa-button type="primary" @click="centerDialogVisible = false"\n          >确 定</pa-button\n        >\n      </span>\n    </pa-dialog-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        centerDialogVisible: false,\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n:::tip\nDialog 的内容是懒渲染的，即在第一次被打开之前，传入的默认 slot 不会被渲染到 DOM 上。因此，如果需要执行 DOM 操作，或通过 `ref` 获取相应组件，请在 `open` 事件回调中进行。\n:::\n\n:::tip\n如果 `visible` 属性绑定的变量位于 Vuex 的 store 内，那么 `.sync` 不会正常工作。此时需要去除 `.sync` 修饰符，同时监听 Dialog 的 `open` 和 `close` 事件，在事件回调中执行 Vuex 中对应的 mutation 更新 `visible` 属性绑定的变量的值。\n:::\n\n### Attributes\n\n| 参数                  | 说明                                                                         | 类型                                 | 可选值 | 默认值 |\n| --------------------- | ---------------------------------------------------------------------------- | ------------------------------------ | ------ | ------ |\n| visible               | 是否显示 Dialog，支持 .sync 修饰符                                           | boolean                              | —      | false  |\n| title                 | Dialog 的标题，也可通过具名 slot （见下表）传入                              | string                               | —      | —      |\n| width                 | Dialog 的宽度                                                                | string                               | —      | 50%    |\n| fullscreen            | 是否为全屏 Dialog                                                            | boolean                              | —      | false  |\n| top                   | Dialog CSS 中的 margin-top 值                                                | string                               | —      | 15vh   |\n| modal                 | 是否需要遮罩层                                                               | boolean                              | —      | true   |\n| modal-append-to-body  | 遮罩层是否插入至 body 元素上，若为 false，则遮罩层会插入至 Dialog 的父元素上 | boolean                              | —      | true   |\n| append-to-body        | Dialog 自身是否插入至 body 元素上。嵌套的 Dialog 必须指定该属性并赋值为 true | boolean                              | —      | false  |\n| lock-scroll           | 是否在 Dialog 出现时将 body 滚动锁定                                         | boolean                              | —      | true   |\n| custom-class          | Dialog 的自定义类名                                                          | string                               | —      | —      |\n| close-on-click-modal  | 是否可以通过点击 modal 关闭 Dialog                                           | boolean                              | —      | true   |\n| close-on-press-escape | 是否可以通过按下 ESC 关闭 Dialog                                             | boolean                              | —      | true   |\n| show-close            | 是否显示关闭按钮                                                             | boolean                              | —      | true   |\n| before-close          | 关闭前的回调，会暂停 Dialog 的关闭                                           | function(done)，done 用于关闭 Dialog | —      | —      |\n| center                | 是否对头部和底部采用居中布局                                                 | boolean                              | —      | false  |\n| destroy-on-close      | 关闭时销毁 Dialog 中的元素                                                   | boolean                              | —      | false  |\n| footerShow            | 对话框自带的 footer                                                          | boolean                              | —      | true   |\n| cancelButtonText      | footerShow 开启时，取消按钮的文本                                            | string                               | —      | 取消   |\n| confirmButtonText     | footerShow 开启时，确定按钮的文本                                            | string                               | —      | 确定   |\n| confirmLoading        | 确定按钮的 loading，footerShow 开启时生效                                    | boolean                              | —      | false  |\n\n### Slot\n\n| name   | 说明                    |\n| ------ | ----------------------- |\n| —      | Dialog 的内容           |\n| title  | Dialog 标题区的内容     |\n| footer | Dialog 按钮操作区的内容 |\n\n### Events\n\n| 事件名称 | 说明                        | 回调参数 |\n| -------- | --------------------------- | -------- |\n| open     | Dialog 打开的回调           | —        |\n| opened   | Dialog 打开动画结束时的回调 | —        |\n| close    | Dialog 关闭的回调           | —        |\n| closed   | Dialog 关闭动画结束时的回调 | —        |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},"52d6":function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## Drawer 抽屉\n\n有些时候, `Dialog` 组件并不满足我们的需求, 比如你的表单很长, 亦或是你需要临时展示一些文档, `Drawer` 拥有和 `Dialog` 几乎相同的 API, 在 UI 上带来不一样的体验.\n\n### 基本用法\n\n呼出一个临时的侧边栏, 可以从多个方向呼出\n\n:::demo 需要设置 `visible` 属性，它的**类型**是 `boolean`,当为 **true** 时显示 Drawer。Drawer 分为两个部分：`title` 和 `body`，`title` 需要具名为 **title** 的 `slot`, 也可以通过 `title` 属性来定义，默认值为空。需要注意的是, Drawer 默认是从右往左打开, 当然可以设置对应的 `direction`, 详细请参考 `direction` 用法 最后，本例还展示了 `before-close` 的用法\n\n```html\n<template>\n  <div style="position:relative">\n    <pa-radio-group v-model="direction">\n      <pa-radio label="ltr">从左往右开</pa-radio>\n      <pa-radio label="rtl">从右往左开</pa-radio>\n      <pa-radio label="ttb">从上往下开</pa-radio>\n      <pa-radio label="btt">从下往上开</pa-radio>\n    </pa-radio-group>\n\n    <pa-button @click="drawer = true" type="primary" style="margin-left: 16px;">\n      点我打开\n    </pa-button>\n    <pa-drawer-s\n      title="我是标题"\n      ref="drawer"\n      :visible.sync="drawer"\n      :direction="direction"\n      :before-close="handleClose"\n      @close="drawerClose"\n    >\n      <span>我来啦!</span>\n      <div style="height: 100vh">撑高</div>\n    </pa-drawer-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        drawer: false,\n        direction: "rtl",\n      };\n    },\n    methods: {\n      handleClose(done) {\n        console.log(1111);\n        this.$confirm("确认关闭？")\n          .then((_) => {\n            done();\n          })\n          .catch((_) => {});\n      },\n      drawerClose() {\n        console.log("抽屉关闭");\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 不添加 Title\n\n当你不需要标题到时候, 你还可以去掉标题\n\n:::demo 当遇到不需要 title 的场景时, 可以通过 `withHeader` 这个属性来关闭掉 title 的显示, 这样可以留出更大的空间给到用户, 为了用户的可访问性, 请务必设定 `title` 的值\n\n```html\n<template>\n  <div>\n    <pa-button @click="drawer = true" type="primary" style="margin-left: 16px;">\n      点我打开\n    </pa-button>\n    <pa-button\n      @click="drawer2 = true"\n      type="primary"\n      style="margin-left: 16px;"\n    >\n      自定义头和尾\n    </pa-button>\n    <pa-drawer-s title="我是标题" :visible.sync="drawer" :with-header="false">\n      <span>我来啦!</span>\n    </pa-drawer-s>\n    <pa-drawer-s\n      title="我是标题"\n      :visible.sync="drawer2"\n      :with-header="false"\n      :with-footer="false"\n    >\n      <span slot="header" style="box-shadow:0 4px 12px rgba(0, 0, 0, 0.15);padding:24px;">自定义头</span>\n      <p>内容</p>\n      <div style="height:100vh">内容2--撑高</div>\n      <div slot="footer" style="box-shadow:0 4px 12px rgba(0, 0, 0, 0.15);padding:24px;">\n        自定义尾\n      </div>\n    </pa-drawer-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        drawer: false,\n        drawer2: false,\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 自定义内容\n\n和 `Dialog` 组件一样, `Drawer` 同样可以在其内部嵌套各种丰富的操作\n\n:::demo\n\n```html\n<template>\n  <div>\n    <pa-button type="primary" @click="table = true"\n      >打开嵌套表格的 Drawer</pa-button\n    >\n    <pa-button type="primary" @click="dialog = true"\n      >打开嵌套 Form 的 Drawer</pa-button\n    >\n    <pa-drawer-s\n      title="我嵌套了表格!"\n      :visible.sync="table"\n      direction="rtl"\n      size="50%"\n    >\n      <pa-table :data="gridData">\n        <pa-table-column\n          property="date"\n          label="日期"\n          width="150"\n        ></pa-table-column>\n        <pa-table-column\n          property="name"\n          label="姓名"\n          width="200"\n        ></pa-table-column>\n        <pa-table-column property="address" label="地址"></pa-table-column>\n      </pa-table>\n    </pa-drawer-s>\n\n    <pa-drawer-s\n      title="我嵌套了 Form !"\n      :before-close="handleClose"\n      :visible.sync="dialog"\n      direction="ltr"\n      custom-class="demo-drawer"\n      :with-footer="false"\n      ref="drawer"\n    >\n      <pa-form :model="form">\n        <pa-form-item label="活动名称" :label-width="formLabelWidth">\n          <pa-input v-model="form.name" autocomplete="off"></pa-input>\n        </pa-form-item>\n        <pa-form-item label="活动区域" :label-width="formLabelWidth">\n          <pa-select v-model="form.region" placeholder="请选择活动区域">\n            <pa-option label="区域一" value="shanghai"></pa-option>\n            <pa-option label="区域二" value="beijing"></pa-option>\n          </pa-select>\n        </pa-form-item>\n      </pa-form>\n      <div slot="footer" style="padding:24px;border-top: 1px solid #e8e8e8;text-align:right;" >\n          <pa-button @click="cancelForm">取 消</pa-button>\n          <pa-button\n            type="primary"\n            @click="$refs.drawer.closeDrawer()"\n            :loading="loading"\n            >{{ loading ? \'提交中 ...\' : \'确 定\' }}</pa-button\n          >\n      </div>\n    </pa-drawer-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        table: false,\n        dialog: false,\n        loading: false,\n        gridData: [\n          {\n            date: "2016-05-02",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n          {\n            date: "2016-05-04",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n          {\n            date: "2016-05-01",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n          {\n            date: "2016-05-03",\n            name: "王小虎",\n            address: "上海市普陀区金沙江路 1518 弄",\n          },\n        ],\n        form: {\n          name: "",\n          region: "",\n          date1: "",\n          date2: "",\n          delivery: false,\n          type: [],\n          resource: "",\n          desc: "",\n        },\n        formLabelWidth: "80px",\n        timer: null,\n      };\n    },\n    methods: {\n      handleClose(done) {\n        if (this.loading) {\n          return;\n        }\n        this.$confirm("确定要提交表单吗？")\n          .then((_) => {\n            this.loading = true;\n            this.timer = setTimeout(() => {\n              done();\n              // 动画关闭需要一定的时间\n              setTimeout(() => {\n                this.loading = false;\n              }, 400);\n            }, 2000);\n          })\n          .catch((_) => {});\n      },\n      cancelForm() {\n        this.loading = false;\n        this.dialog = false;\n        clearTimeout(this.timer);\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 多层嵌套\n\n`Drawer` 组件也拥有多层嵌套的方法\n\n:::demo 同样, 如果你需要嵌套多层 `Drawer` 请一定要设置 `append-to-body` 属性为 **true**\n\n```html\n<template>\n  <div>\n    <pa-button @click="drawer = true" type="primary" style="margin-left: 16px;">\n      点我打开\n    </pa-button>\n\n    <pa-drawer-s title="我是外面的 Drawer" :visible.sync="drawer" size="50%">\n      <div>\n        <pa-button @click="innerDrawer = true">打开里面的!</pa-button>\n        <pa-drawer-s\n          title="我是里面的"\n          :append-to-body="true"\n          :before-close="handleClose"\n          :visible.sync="innerDrawer"\n        >\n          <p>_(:зゝ∠)_</p>\n        </pa-drawer-s>\n      </div>\n    </pa-drawer-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        drawer: false,\n        innerDrawer: false,\n      };\n    },\n    methods: {\n      handleClose(done) {\n        this.$confirm("还有未保存的工作哦确定关闭吗？")\n          .then((_) => {\n            done();\n          })\n          .catch((_) => {});\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n:::tip\n\nDrawer 的内容是懒渲染的，即在第一次被打开之前，传入的默认 slot 不会被渲染到 DOM 上。因此，如果需要执行 DOM 操作，或通过 `ref` 获取相应组件，请在 `open` 事件回调中进行。\n\n:::\n\n:::tip\n\nDrawer 提供一个 `destroyOnClose` API, 用来在关闭 Drawer 时销毁子组件内容, 例如清理表单内的状态, 在必要时可以将该属性设置为 **true** 用来保证初始状态的一致性\n\n:::\n\n:::tip\n\n如果 `visible` 属性绑定的变量位于 Vuex 的 store 内，那么 `.sync` 不会正常工作。此时需要去除 `.sync` 修饰符，同时监听 Drawer 的 `open` 和 `close` 事件，在事件回调中执行 Vuex 中对应的 mutation 更新 `visible` 属性绑定的变量的值。\n\n:::\n\n### Drawer Attributes\n\n| 参数                  | 说明                                                                                                                       | 类型                                 | 可选值                | 默认值 |\n| --------------------- | -------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ | --------------------- | ------ |\n| append-to-body        | Drawer 自身是否插入至 body 元素上。嵌套的 Drawer 必须指定该属性并赋值为 true                                               | boolean                              | —                     | false  |\n| before-close          | 关闭前的回调，会暂停 Drawer 的关闭                                                                                         | function(done)，done 用于关闭 Drawer | —                     | —      |\n| close-on-press-escape | 是否可以通过按下 ESC 关闭 Drawer                                                                                           | boolean                              | —                     | true   |\n| custom-class          | Drawer 的自定义类名                                                                                                        | string                               | —                     | —      |\n| destroy-on-close      | 控制是否在关闭 Drawer 之后将子元素全部销毁                                                                                 | boolean                              | -                     | false  |\n| modal                 | 是否需要遮罩层                                                                                                             | boolean                              | —                     | true   |\n| modal-append-to-body  | 遮罩层是否插入至 body 元素上，若为 false，则遮罩层会插入至 Drawer 的父元素上                                               | boolean                              | —                     | true   |\n| direction             | Drawer 打开的方向                                                                                                          | Direction                            | rtl / ltr / ttb / btt | rtl    |\n| show-close            | 是否显示关闭按钮                                                                                                           | boolean                              | —                     | true   |\n| size                  | Drawer 窗体的大小, 当使用 `number` 类型时, 以像素为单位, 当使用 `string` 类型时, 请传入 \'x%\', 否则便会以 `number` 类型解释 | number / string                      | -                     | \'30%\'  |\n| title                 | Drawer 的标题，也可通过具名 slot （见下表）传入                                                                            | string                               | —                     | —      |\n| visible               | 是否显示 Drawer，支持 .sync 修饰符                                                                                         | boolean                              | —                     | false  |\n| wrapperClosable       | 点击遮罩层是否可以关闭 Drawer                                                                                              | boolean                              | -                     | true   |\n| withHeader            | 控制是否显示 header 栏, 默认为 true, 当此项为 false 时, title attribute 和 title slot 均不生效                             | boolean                              | -                     | true   |\n\n### Drawer Slot\n\n| name  | 说明                |\n| ----- | ------------------- |\n| —     | Drawer 的内容       |\n| title | Drawer 标题区的内容 |\n\n### Drawer Methods\n\n| name        | 说明                                                    |\n| ----------- | ------------------------------------------------------- |\n| closeDrawer | 用于关闭 Drawer, 该方法会调用传入的 `before-close` 方法 |\n\n### Drawer Events\n\n| 事件名称 | 说明                        | 回调参数 |\n| -------- | --------------------------- | -------- |\n| open     | Drawer 打开的回调           | —        |\n| opened   | Drawer 打开动画结束时的回调 | —        |\n| close    | Drawer 关闭的回调           | —        |\n| closed   | Drawer 关闭动画结束时的回调 | —        |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},6279:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='<style>\n.el-tabs{\n  background:#fff;\n}\n.el-tabs__content{\n  padding: 0 16px 16px;\n}\n.el-tabs--left > .el-tabs__content{\n  padding: 16px 16px 16px 6px;\n}\n</style>\n\n## Tabs 标签页\n\n分隔内容上有关联但属于不同类别的数据集合。\n\n### 基础用法\n\n基础的、简洁的标签页。\n\n:::demo Tabs 组件提供了选项卡功能，默认选中第一个标签页，你也可以通过 `value` 属性来指定当前选中的标签页。\n\n```html\n<template>\n    <pa-tabs-s v-model="activeName" stretch @tab-click="handleClick">\n      <pa-tab-pane-s label="用户管理" name="first">用户管理</pa-tab-pane-s>\n      <pa-tab-pane-s label="配置管理" name="second">配置管理</pa-tab-pane-s>\n      <pa-tab-pane-s label="角色管理" name="third">角色管理</pa-tab-pane-s>\n      <pa-tab-pane-s label="定时任务补偿" name="fourth">定时任务补偿</pa-tab-pane-s>\n    </pa-tabs-s>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        activeName: "second",\n      };\n    },\n    methods: {\n      handleClick(tab, event) {\n        console.log(tab, event);\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 选项卡样式\n\n选项卡样式的标签页。\n\n:::demo 只需要设置 `type` 属性为 `card` 就可以使选项卡改变为标签风格。\n\n```html\n<template>\n  <pa-tabs v-model="activeName" type="card" @tab-click="handleClick">\n    <pa-tab-pane-s label="用户管理" name="first">用户管理</pa-tab-pane-s>\n    <pa-tab-pane-s label="配置管理" name="second">配置管理</pa-tab-pane-s>\n    <pa-tab-pane-s label="角色管理" name="third">角色管理</pa-tab-pane-s>\n    <pa-tab-pane-s label="定时任务补偿" name="fourth"\n      >定时任务补偿</pa-tab-pane-s\n    >\n  </pa-tabs>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        activeName: "first",\n      };\n    },\n    methods: {\n      handleClick(tab, event) {\n        console.log(tab, event);\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 卡片化\n\n卡片化的标签页。\n\n:::demo 将`type`设置为`border-card`。\n\n```html\n<template>\n  <pa-tabs type="border-card">\n    <pa-tab-pane-s label="用户管理">用户管理</pa-tab-pane-s>\n    <pa-tab-pane-s label="配置管理">配置管理</pa-tab-pane-s>\n    <pa-tab-pane-s label="角色管理">角色管理</pa-tab-pane-s>\n    <pa-tab-pane-s label="定时任务补偿">定时任务补偿</pa-tab-pane-s>\n  </pa-tabs>\n</template>\n```\n\n:::\n\n### 位置\n\n可以通过 `tab-position` 设置标签的位置\n\n:::demo 标签一共有四个方向的设置 `tabPosition="left|right|top|bottom"`\n\n```html\n<template>\n  <div>\n    <pa-radio-group v-model="tabPosition" style="margin-bottom: 30px;">\n      <pa-radio-button label="top">top</pa-radio-button>\n      <pa-radio-button label="right">right</pa-radio-button>\n      <pa-radio-button label="bottom">bottom</pa-radio-button>\n      <pa-radio-button label="left">left</pa-radio-button>\n    </pa-radio-group>\n\n    <pa-tabs :tab-position="tabPosition" style="height: 200px;">\n      <pa-tab-pane-s label="用户管理">用户管理</pa-tab-pane-s>\n      <pa-tab-pane-s label="配置管理">配置管理</pa-tab-pane-s>\n      <pa-tab-pane-s label="角色管理">角色管理</pa-tab-pane-s>\n      <pa-tab-pane-s label="定时任务补偿">定时任务补偿</pa-tab-pane-s>\n    </pa-tabs>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        tabPosition: "left",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 自定义标签页\n\n可以通过具名 `slot` 来实现自定义标签页的内容\n\n:::demo\n\n```html\n<template>\n  <pa-tabs type="border-card">\n    <pa-tab-pane-s>\n      <span slot="label"><i class="pa-icon-date"></i> 我的行程</span>\n      我的行程\n    </pa-tab-pane-s>\n    <pa-tab-pane-s label="消息中心">消息中心</pa-tab-pane-s>\n    <pa-tab-pane-s label="角色管理">角色管理</pa-tab-pane-s>\n    <pa-tab-pane-s label="定时任务补偿">定时任务补偿</pa-tab-pane-s>\n  </pa-tabs>\n</template>\n```\n\n:::\n\n### 动态增减标签页\n\n增减标签页按钮只能在选项卡样式的标签页下使用\n\n:::demo\n\n```html\n<template>\n  <pa-tabs\n    v-model="editableTabsValue"\n    type="card"\n    editable\n    @edit="handleTabsEdit"\n  >\n    <pa-tab-pane-s\n      :key="item.name"\n      v-for="(item, index) in editableTabs"\n      :label="item.title"\n      :name="item.name"\n    >\n      {{item.content}}\n    </pa-tab-pane-s>\n  </pa-tabs>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        editableTabsValue: "2",\n        editableTabs: [\n          {\n            title: "Tab 1",\n            name: "1",\n            content: "Tab 1 content",\n          },\n          {\n            title: "Tab 2",\n            name: "2",\n            content: "Tab 2 content",\n          },\n        ],\n        tabIndex: 2,\n      };\n    },\n    methods: {\n      handleTabsEdit(targetName, action) {\n        if (action === "add") {\n          let newTabName = ++this.tabIndex + "";\n          this.editableTabs.push({\n            title: "New Tab",\n            name: newTabName,\n            content: "New Tab content",\n          });\n          this.editableTabsValue = newTabName;\n        }\n        if (action === "remove") {\n          let tabs = this.editableTabs;\n          let activeName = this.editableTabsValue;\n          if (activeName === targetName) {\n            tabs.forEach((tab, index) => {\n              if (tab.name === targetName) {\n                let nextTab = tabs[index + 1] || tabs[index - 1];\n                if (nextTab) {\n                  activeName = nextTab.name;\n                }\n              }\n            });\n          }\n\n          this.editableTabsValue = activeName;\n          this.editableTabs = tabs.filter((tab) => tab.name !== targetName);\n        }\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 自定义增加标签页触发器\n\n:::demo\n\n```html\n<template>\n  <div>\n    <div style="margin-bottom: 20px;">\n      <pa-button size="small" @click="addTab(editableTabsValue)">\n        add tab\n      </pa-button>\n    </div>\n    <pa-tabs\n      v-model="editableTabsValue"\n      type="card"\n      closable\n      @tab-remove="removeTab"\n    >\n      <pa-tab-pane-s\n        v-for="(item, index) in editableTabs"\n        :key="item.name"\n        :label="item.title"\n        :name="item.name"\n      >\n        {{item.content}}\n      </pa-tab-pane-s>\n    </pa-tabs>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        editableTabsValue: "2",\n        editableTabs: [\n          {\n            title: "Tab 1",\n            name: "1",\n            content: "Tab 1 content",\n          },\n          {\n            title: "Tab 2",\n            name: "2",\n            content: "Tab 2 content",\n          },\n        ],\n        tabIndex: 2,\n      };\n    },\n    methods: {\n      addTab(targetName) {\n        let newTabName = ++this.tabIndex + "";\n        this.editableTabs.push({\n          title: "New Tab",\n          name: newTabName,\n          content: "New Tab content",\n        });\n        this.editableTabsValue = newTabName;\n      },\n      removeTab(targetName) {\n        let tabs = this.editableTabs;\n        let activeName = this.editableTabsValue;\n        if (activeName === targetName) {\n          tabs.forEach((tab, index) => {\n            if (tab.name === targetName) {\n              let nextTab = tabs[index + 1] || tabs[index - 1];\n              if (nextTab) {\n                activeName = nextTab.name;\n              }\n            }\n          });\n        }\n\n        this.editableTabsValue = activeName;\n        this.editableTabs = tabs.filter((tab) => tab.name !== targetName);\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### Tabs Attributes\n\n| 参数            | 说明                                                                        | 类型                                | 可选值                | 默认值              |\n| --------------- | --------------------------------------------------------------------------- | ----------------------------------- | --------------------- | ------------------- |\n| value / v-model | 绑定值，选中选项卡的 name                                                   | string                              | —                     | 第一个选项卡的 name |\n| type            | 风格类型                                                                    | string                              | card/border-card      | —                   |\n| closable        | 标签是否可关闭                                                              | boolean                             | —                     | false               |\n| addable         | 标签是否可增加                                                              | boolean                             | —                     | false               |\n| editable        | 标签是否同时可增加和关闭                                                    | boolean                             | —                     | false               |\n| tab-position    | 选项卡所在位置                                                              | string                              | top/right/bottom/left | top                 |\n| stretch         | 标签的宽度是否自撑开                                                        | boolean                             | -                     | false               |\n| before-leave    | 切换标签之前的钩子，若返回 false 或者返回 Promise 且被 reject，则阻止切换。 | Function(activeName, oldActiveName) | —                     | —                   |\n\n### Tabs Events\n\n| 事件名称   | 说明                                    | 回调参数              |\n| ---------- | --------------------------------------- | --------------------- |\n| tab-click  | tab 被选中时触发                        | 被选中的标签 tab 实例 |\n| tab-remove | 点击 tab 移除按钮后触发                 | 被删除的标签的 name   |\n| tab-add    | 点击 tabs 的新增按钮后触发              | —                     |\n| edit       | 点击 tabs 的新增按钮或 tab 被关闭后触发 | (targetName, action)  |\n\n### Tab-pane Attributes\n\n| 参数     | 说明                                              | 类型    | 可选值 | 默认值                                                |\n| -------- | ------------------------------------------------- | ------- | ------ | ----------------------------------------------------- |\n| label    | 选项卡标题                                        | string  | —      | —                                                     |\n| disabled | 是否禁用                                          | boolean | —      | false                                                 |\n| name     | 与选项卡绑定值 value 对应的标识符，表示选项卡别名 | string  | —      | 该选项卡在选项卡列表中的顺序值，如第一个选项卡则为\'1\' |\n| closable | 标签是否可关闭                                    | boolean | —      | false                                                 |\n| lazy     | 标签是否延迟渲染                                  | boolean | —      | false                                                 |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},8232:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='# PaInput 输入框\n\n### 基本用法\n\n:::demo\n\n```html\n<template>\n  <div>\n    <pa-input :value.sync="value" placeholder="请输入内容" clearable style="width: 150px" />\n    <pa-input\n      :value.sync="value"\n      placeholder="请输入内容"\n      clearable\n      disabled\n      style="width: 150px"\n    />\n    <pa-input\n      :value.sync="value"\n      placeholder="请输入密码"\n      clearable\n      show-password\n      style="width: 150px"\n    />\n    <pa-input :value.sync="value" placeholder="请输入内容" clearable style="width: 150px">\n      <i slot="prefix" class="el-input__icon el-icon-search" />\n    </pa-input>\n    <pa-input\n      style="width: 150px"\n      type="textarea"\n      :rows="2"\n      placeholder="请输入内容"\n      :value.sync="value"\n    />\n    <pa-input\n      style="width: 150px"\n      type="textarea"\n      placeholder="请输入内容"\n      :value.sync="value"\n      maxlength="30"\n      show-word-limit\n    />\n  </div>\n</template>\n<script>\n  export default {\n    name: \'PahmInput\',\n    data() {\n      return {\n        value: \'\',\n      };\n    },\n\n    methods: {\n      showDrawer() {\n        this.visible = true;\n      },\n      handleOK() {\n        this.confirmLoading = true;\n        setTimeout(() => {\n          this.visible = false;\n          this.confirmLoading = false;\n        }, 1000);\n      },\n      handleCancel() {\n        this.visible = false;\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n\n### Input Attributes\n\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| type         | 类型   | string  | text，textarea 和其他 [原生 input 的 type 值](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types) | text |\n| value         | 绑定值           | string / number  | — | — |\n| maxlength     | 原生属性，最大输入长度      | number          |  —  | — |\n| minlength     | 原生属性，最小输入长度      | number          | — | — |\n| placeholder   | 输入框占位文本    | string          | — | — |\n| clearable     | 是否可清空        | boolean         | — | false |\n| disabled      | 禁用            | boolean         | — | false   |\n| size          | 输入框尺寸，只在 `type!="textarea"` 时有效      | string          | medium / small / mini  | — |\n| prefix-icon   | 输入框头部图标    | string          | — | — |\n| suffix-icon   | 输入框尾部图标    | string          | — | — |\n| rows          | 输入框行数，只对 `type="textarea"` 有效  |  number | — |  2   |\n| autosize      | 自适应内容高度，只对 `type="textarea"` 有效，可传入对象，如，{ minRows: 2, maxRows: 6 }  |  boolean / object | — |  false   |\n| autocomplete | 原生属性，自动补全 | string | on, off | off |\n| auto-complete | 下个主版本弃用 | string | on, off | off |\n| name | 原生属性 | string | — | — |\n| readonly | 原生属性，是否只读 | boolean | — | false |\n| max | 原生属性，设置最大值 | — | — | — |\n| min | 原生属性，设置最小值 | — | — | — |\n| step | 原生属性，设置输入字段的合法数字间隔 | — | — | — |\n| resize | 控制是否能被用户缩放 | string | none, both, horizontal, vertical | — |\n| autofocus | 原生属性，自动获取焦点 | boolean | true, false | false |\n| form | 原生属性 | string | — | — |\n| label | 输入框关联的label文字 | string | — | — |\n| tabindex | 输入框的tabindex | string | - | - |\n\n### Input Slots\n| name | 说明 |\n|------|--------|\n| prefix | 输入框头部内容，只对 `type="text"` 有效 |\n| suffix | 输入框尾部内容，只对 `type="text"` 有效 |\n| prepend | 输入框前置内容，只对 `type="text"` 有效 |\n| append | 输入框后置内容，只对 `type="text"` 有效 |\n\n### Input Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|--------|---------|\n| blur | 在 Input 失去焦点时触发 | (event: Event) |\n| focus | 在 Input 获得焦点时触发 | (event: Event) |\n| change | 在 Input 值改变时触发 | (value: string \\| number) |\n| clear | 在点击由 `clearable` 属性生成的清空按钮时触发 | — |\n\n### Input Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 input 获取焦点 | — |\n| blur | 使 input 失去焦点 | — |\n| select | 选中 input 中的文字 | — |\n\n### Autocomplete Attributes\n\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| placeholder   | 输入框占位文本   | string          | — | — |\n| disabled      | 禁用            | boolean         | — | false   |\n| value-key | 输入建议对象中用于显示的键名 | string | — | value |\n| value         | 必填值，输入绑定值   | string  | — | — |\n| debounce      | 获取输入建议的去抖延时 | number         | — | 300 |\n| placement     | 菜单弹出位置 | string         | top / top-start / top-end / bottom / bottom-start / bottom-end | bottom-start |\n| fetch-suggestions | 返回输入建议的方法，仅当你的输入建议数据 resolve 时，通过调用 callback(data:[]) 来返回它  | Function(queryString, callback)  | — | — |\n| popper-class | Autocomplete 下拉列表的类名 | string | — | — |\n| trigger-on-focus | 是否在输入框 focus 时显示建议列表 | boolean | — | true |\n| name | 原生属性 | string | — | — |\n| select-when-unmatched | 在输入没有任何匹配建议的情况下，按下回车是否触发 `select` 事件 | boolean | — | false |\n| label | 输入框关联的label文字 | string | — | — |\n| prefix-icon | 输入框头部图标 | string | — | — |\n| suffix-icon | 输入框尾部图标 | string | — | — |\n| hide-loading | 是否隐藏远程加载时的加载图标 | boolean | — | false |\n| popper-append-to-body | 是否将下拉列表插入至 body 元素。在下拉列表的定位出现问题时，可将该属性设置为 false | boolean | - | true |\n\n### Autocomplete Slots\n| name | 说明 |\n|------|--------|\n| prefix | 输入框头部内容 |\n| suffix | 输入框尾部内容 |\n| prepend | 输入框前置内容 |\n| append | 输入框后置内容 |\n\n### Autocomplete Scoped Slot\n| name | 说明 |\n|------|--------|\n| — | 自定义输入建议，参数为 { item } |\n\n### Autocomplete Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|--------|---------|\n| select | 点击选中建议项时触发 | 选中建议项 |\n\n### Autocomplete Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 input 获取焦点 | - |\n\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},a2af:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## Switch 开关\n\n表示两种相互对立的状态间的切换，多用于触发「开/关」。\n\n### 基本用法\n\n:::demo 绑定`v-model`到一个`Boolean`类型的变量。可以使用`active-color`属性与`inactive-color`属性来设置开关的背景色。\n\n```html\n<template>\n  <pa-switch v-model="value" active-color="#13ce66" inactive-color="#ff4949">\n  </pa-switch>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        value: true,\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 文字描述\n\n:::demo 使用`active-text`属性与`inactive-text`属性来设置开关的文字描述。\n\n```html\n<template>\n  <div>\n    <div style="margin-bottom:24px">\n      <pa-button @click="statuesChange">启用/禁用切换</pa-button>\n    </div>\n    <div>\n      <span style="display:inline-block;width:120px">正常</span>\n      <pa-switch\n        v-model="value1"\n        :disabled="disabled"\n        active-text="按月付费"\n        inactive-text="按年付费"\n      >\n      </pa-switch>\n    </div>\n    <div>\n      <span style="display:inline-block;width:120px">文字显示在右侧</span>\n      <pa-switch\n        v-model="value2"\n        active-color="#13ce66"\n        inactive-color="#ff4949"\n        active-text="按月付费"\n        inactive-text="按年付费"\n        textShowType="aside"\n        :disabled="disabled"\n      >\n      </pa-switch>\n    </div>\n    <div>\n      <span style="display:inline-block;width:120px">适用单个文字</span>\n      <pa-switch\n        v-model="value2"\n        active-color="#13ce66"\n        inactive-color="#ff4949"\n        active-text="月"\n        inactive-text="年"\n        textShowType="inner"\n        :disabled="disabled"\n      >\n      </pa-switch>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        value1: true,\n        value2: true,\n        disabled: false,\n      };\n    },\n    methods: {\n      statuesChange() {\n        this.disabled = !this.disabled;\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 扩展的 value 类型\n\n:::demo 设置`active-value`和`inactive-value`属性，接受`Boolean`, `String`或`Number`类型的值。\n\n```html\n<template>\n  <pa-tooltip :content="\'Switch value: \' + value" placement="top">\n    <pa-switch\n      v-model="value"\n      active-color="#13ce66"\n      inactive-color="#ff4949"\n      active-value="100"\n      inactive-value="0"\n    >\n    </pa-switch>\n  </pa-tooltip>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        value: "100",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 禁用状态\n\n:::demo 设置`disabled`属性，接受一个`Boolean`，设置`true`即可禁用。\n\n```html\n<template>\n  <div>\n    <pa-switch v-model="value1" disabled> </pa-switch>\n    <pa-switch v-model="value2" disabled> </pa-switch>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        value1: true,\n        value2: false,\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### Attributes\n\n| 参数                | 说明                                                          | 类型                      | 可选值 | 默认值  |\n| ------------------- | ------------------------------------------------------------- | ------------------------- | ------ | ------- |\n| value / v-model     | 绑定值                                                        | boolean / string / number | —      | —       |\n| disabled            | 是否禁用                                                      | boolean                   | —      | false   |\n| width               | switch 的宽度（像素）                                         | number                    | —      | 40      |\n| active-icon-class   | switch 打开时所显示图标的类名，设置此项会忽略 `active-text`   | string                    | —      | —       |\n| inactive-icon-class | switch 关闭时所显示图标的类名，设置此项会忽略 `inactive-text` | string                    | —      | —       |\n| active-text         | switch 打开时的文字描述                                       | string                    | —      | —       |\n| inactive-text       | switch 关闭时的文字描述                                       | string                    | —      | —       |\n| active-value        | switch 打开时的值                                             | boolean / string / number | —      | true    |\n| inactive-value      | switch 关闭时的值                                             | boolean / string / number | —      | false   |\n| active-color        | switch 打开时的背景色                                         | string                    | —      | #409EFF |\n| inactive-color      | switch 关闭时的背景色                                         | string                    | —      | #C0CCDA |\n| name                | switch 对应的 name 属性                                       | string                    | —      | —       |\n| validate-event      | 改变 switch 状态时是否触发表单的校验                          | boolean                   | -      | true    |\n\n### Events\n\n| 事件名称 | 说明                            | 回调参数   |\n| -------- | ------------------------------- | ---------- |\n| change   | switch 状态发生变化时的回调函数 | 新状态的值 |\n\n### Methods\n\n| 方法名 | 说明               | 参数 |\n| ------ | ------------------ | ---- |\n| focus  | 使 Switch 获取焦点 | -    |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},ae01:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## Select 选择器\n\n当选项过多时，使用下拉菜单展示并选择内容。\n\n### 基础用法\n\n适用广泛的基础单选\n:::demo `v-model`的值为当前被选中的`pa-option-s`的 value 属性值\n\n```html\n<template>\n  <pa-select-s\n    v-model="value"\n    :popper-append-to-body="false"\n    placeholder="请选择"\n  >\n    <pa-icon slot="prefix" name="icon-shujuyuanguanli"></pa-icon>\n    <pa-option-s\n      v-for="item in options"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n    >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            value: "选项1",\n            label: "黄金糕",\n          },\n          {\n            value: "选项2",\n            label: "双皮奶",\n          },\n          {\n            value: "选项3",\n            label: "蚵仔煎",\n          },\n          {\n            value: "选项4",\n            label: "龙须面",\n          },\n          {\n            value: "选项5",\n            label: "北京烤鸭",\n          },\n        ],\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 有禁用选项\n\n:::demo 在`pa-option-s`中，设定`disabled`值为 true，即可禁用该选项\n\n```html\n<template>\n  <pa-select-s v-model="value" placeholder="请选择">\n    <pa-option-s\n      v-for="item in options"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n      :disabled="item.disabled"\n    >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            value: "选项1",\n            label: "黄金糕",\n          },\n          {\n            value: "选项2",\n            label: "双皮奶",\n            disabled: true,\n          },\n          {\n            value: "选项3",\n            label: "蚵仔煎",\n          },\n          {\n            value: "选项4",\n            label: "龙须面",\n          },\n          {\n            value: "选项5",\n            label: "北京烤鸭",\n          },\n        ],\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 禁用状态\n\n选择器不可用状态\n\n:::demo 为`pa-select-s`设置`disabled`属性，则整个选择器不可用\n\n```html\n<template>\n  <pa-select-s v-model="value" disabled placeholder="请选择">\n    <pa-option-s\n      v-for="item in options"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n    >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            value: "选项1",\n            label: "黄金糕",\n          },\n          {\n            value: "选项2",\n            label: "双皮奶",\n          },\n          {\n            value: "选项3",\n            label: "蚵仔煎",\n          },\n          {\n            value: "选项4",\n            label: "龙须面",\n          },\n          {\n            value: "选项5",\n            label: "北京烤鸭",\n          },\n        ],\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 可清空单选\n\n包含清空按钮，可将选择器清空为初始状态\n\n:::demo 为`pa-select-s`设置`clearable`属性，则可将选择器清空。需要注意的是，`clearable`属性仅适用于单选。\n\n```html\n<template>\n  <pa-select-s v-model="value" clearable placeholder="请选择">\n    <pa-option-s\n      v-for="item in options"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n    >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            value: "选项1",\n            label: "黄金糕",\n          },\n          {\n            value: "选项2",\n            label: "双皮奶",\n          },\n          {\n            value: "选项3",\n            label: "蚵仔煎",\n          },\n          {\n            value: "选项4",\n            label: "龙须面",\n          },\n          {\n            value: "选项5",\n            label: "北京烤鸭",\n          },\n        ],\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 基础多选\n\n适用性较广的基础多选，用 Tag 展示已选项\n\n:::demo 为`pa-select-s`设置`multiple`属性即可启用多选，此时`v-model`的值为当前选中值所组成的数组。默认情况下选中值会以 Tag 的形式展现，你也可以设置`collapse-tags`属性将它们合并为一段文字。\n\n```html\n<template>\n  <div>\n    <pa-select-s v-model="value1" multiple placeholder="请选择">\n      <pa-option-s\n        v-for="item in options"\n        :key="item.value"\n        :label="item.label"\n        :value="item.value"\n      >\n      </pa-option-s>\n    </pa-select-s>\n\n    <pa-select-s\n      v-model="value2"\n      multiple\n      collapse-tags\n      style="margin-left: 20px;"\n      placeholder="请选择"\n    >\n      <pa-option-s\n        v-for="item in options"\n        :key="item.value"\n        :label="item.label"\n        :value="item.value"\n      >\n      </pa-option-s>\n    </pa-select-s>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            value: "选项1",\n            label: "黄金糕",\n          },\n          {\n            value: "选项2",\n            label: "双皮奶",\n          },\n          {\n            value: "选项3",\n            label: "蚵仔煎",\n          },\n          {\n            value: "选项4",\n            label: "龙须面",\n          },\n          {\n            value: "选项5",\n            label: "北京烤鸭",\n          },\n        ],\n        value1: [],\n        value2: [],\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 自定义模板\n\n可以自定义备选项\n\n:::demo 将自定义的 HTML 模板插入`pa-option-s`的 slot 中即可。\n\n```html\n<template>\n  <pa-select-s v-model="value" placeholder="请选择">\n    <pa-option-s\n      v-for="item in cities"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n    >\n      <span style="float: left">{{ item.label }}</span>\n      <span style="float: right; color: #8492a6; font-size: 13px"\n        >{{ item.value }}</span\n      >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        cities: [\n          {\n            value: "Beijing",\n            label: "北京",\n          },\n          {\n            value: "Shanghai",\n            label: "上海",\n          },\n          {\n            value: "Nanjing",\n            label: "南京",\n          },\n          {\n            value: "Chengdu",\n            label: "成都",\n          },\n          {\n            value: "Shenzhen",\n            label: "深圳",\n          },\n          {\n            value: "Guangzhou",\n            label: "广州",\n          },\n        ],\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 分组\n\n备选项进行分组展示\n\n:::demo 使用`pa-option-s-group`对备选项进行分组，它的`label`属性为分组名\n\n```html\n<template>\n  <pa-select-s v-model="value" placeholder="请选择">\n    <pa-option-group-s\n      v-for="group in options"\n      :key="group.label"\n      :label="group.label"\n    >\n      <pa-option-s\n        v-for="item in group.options"\n        :key="item.value"\n        :label="item.label"\n        :value="item.value"\n      >\n      </pa-option-s>\n    </pa-option-group-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            label: "热门城市",\n            options: [\n              {\n                value: "Shanghai",\n                label: "上海",\n              },\n              {\n                value: "Beijing",\n                label: "北京",\n              },\n            ],\n          },\n          {\n            label: "城市名",\n            options: [\n              {\n                value: "Chengdu",\n                label: "成都",\n              },\n              {\n                value: "Shenzhen",\n                label: "深圳",\n              },\n              {\n                value: "Guangzhou",\n                label: "广州",\n              },\n              {\n                value: "Dalian",\n                label: "大连",\n              },\n            ],\n          },\n        ],\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 可搜索\n\n可以利用搜索功能快速查找选项\n\n:::demo 为`pa-select-s`添加`filterable`属性即可启用搜索功能。默认情况下，Select 会找出所有`label`属性包含输入值的选项。如果希望使用其他的搜索逻辑，可以通过传入一个`filter-method`来实现。`filter-method`为一个`Function`，它会在输入值发生变化时调用，参数为当前输入值。\n\n```html\n<template>\n  <pa-select-s v-model="value" filterable placeholder="请选择">\n    <pa-option-s\n      v-for="item in options"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n    >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            value: "选项1",\n            label: "黄金糕",\n          },\n          {\n            value: "选项2",\n            label: "双皮奶",\n          },\n          {\n            value: "选项3",\n            label: "蚵仔煎",\n          },\n          {\n            value: "选项4",\n            label: "龙须面",\n          },\n          {\n            value: "选项5",\n            label: "北京烤鸭",\n          },\n        ],\n        value: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 远程搜索\n\n从服务器搜索数据，输入关键字进行查找\n:::demo 为了启用远程搜索，需要将`filterable`和`remote`设置为`true`，同时传入一个`remote-method`。`remote-method`为一个`Function`，它会在输入值发生变化时调用，参数为当前输入值。需要注意的是，如果`pa-option-s`是通过`v-for`指令渲染出来的，此时需要为`pa-option-s`添加`key`属性，且其值需具有唯一性，比如此例中的`item.value`。\n\n```html\n<template>\n  <pa-select-s\n    v-model="value"\n    multiple\n    filterable\n    remote\n    reserve-keyword\n    placeholder="请输入关键词"\n    :remote-method="remoteMethod"\n    :loading="loading"\n  >\n    <pa-option-s\n      v-for="item in options"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n    >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [],\n        value: [],\n        list: [],\n        loading: false,\n        states: [\n          "Alabama",\n          "Alaska",\n          "Arizona",\n          "Arkansas",\n          "California",\n          "Colorado",\n          "Connecticut",\n          "Delaware",\n          "Florida",\n          "Georgia",\n          "Hawaii",\n          "Idaho",\n          "Illinois",\n          "Indiana",\n          "Iowa",\n          "Kansas",\n          "Kentucky",\n          "Louisiana",\n          "Maine",\n          "Maryland",\n          "Massachusetts",\n          "Michigan",\n          "Minnesota",\n          "Mississippi",\n          "Missouri",\n          "Montana",\n          "Nebraska",\n          "Nevada",\n          "New Hampshire",\n          "New Jersey",\n          "New Mexico",\n          "New York",\n          "North Carolina",\n          "North Dakota",\n          "Ohio",\n          "Oklahoma",\n          "Oregon",\n          "Pennsylvania",\n          "Rhode Island",\n          "South Carolina",\n          "South Dakota",\n          "Tennessee",\n          "Texas",\n          "Utah",\n          "Vermont",\n          "Virginia",\n          "Washington",\n          "West Virginia",\n          "Wisconsin",\n          "Wyoming",\n        ],\n      };\n    },\n    mounted() {\n      this.list = this.states.map((item) => {\n        return { value: `value:${item}`, label: `label:${item}` };\n      });\n    },\n    methods: {\n      remoteMethod(query) {\n        if (query !== "") {\n          this.loading = true;\n          setTimeout(() => {\n            this.loading = false;\n            this.options = this.list.filter((item) => {\n              return item.label.toLowerCase().indexOf(query.toLowerCase()) > -1;\n            });\n          }, 200);\n        } else {\n          this.options = [];\n        }\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 创建条目\n\n可以创建并选中选项中不存在的条目\n:::demo 使用`allow-create`属性即可通过在输入框中输入文字来创建新的条目。注意此时`filterable`必须为真。本例还使用了`default-first-option`属性，在该属性打开的情况下，按下回车就可以选中当前选项列表中的第一个选项，无需使用鼠标或键盘方向键进行定位。\n\n```html\n<template>\n  <pa-select-s\n    v-model="value"\n    multiple\n    filterable\n    allow-create\n    default-first-option\n    placeholder="请选择文章标签"\n  >\n    <pa-option-s\n      v-for="item in options"\n      :key="item.value"\n      :label="item.label"\n      :value="item.value"\n    >\n    </pa-option-s>\n  </pa-select-s>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        options: [\n          {\n            value: "HTML",\n            label: "HTML",\n          },\n          {\n            value: "CSS",\n            label: "CSS",\n          },\n          {\n            value: "JavaScript",\n            label: "JavaScript",\n          },\n        ],\n        value: [],\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n:::tip\n如果 Select 的绑定值为对象类型，请务必指定 `value-key` 作为它的唯一性标识。\n:::\n\n### Select Attributes\n\n| 参数                  | 说明                                                                           | 类型                      | 可选值            | 默认值     |\n| --------------------- | ------------------------------------------------------------------------------ | ------------------------- | ----------------- | ---------- |\n| value / v-model       | 绑定值                                                                         | boolean / string / number | —                 | —          |\n| multiple              | 是否多选                                                                       | boolean                   | —                 | false      |\n| disabled              | 是否禁用                                                                       | boolean                   | —                 | false      |\n| value-key             | 作为 value 唯一标识的键名，绑定值为对象类型时必填                              | string                    | —                 | value      |\n| size                  | 输入框尺寸                                                                     | string                    | medium/small/mini | —          |\n| clearable             | 是否可以清空选项                                                               | boolean                   | —                 | false      |\n| collapse-tags         | 多选时是否将选中值按文字的形式展示                                             | boolean                   | —                 | false      |\n| multiple-limit        | 多选时用户最多可以选择的项目数，为 0 则不限制                                  | number                    | —                 | 0          |\n| name                  | select input 的 name 属性                                                      | string                    | —                 | —          |\n| autocomplete          | select input 的 autocomplete 属性                                              | string                    | —                 | off        |\n| auto-complete         | 下个主版本弃用                                                                 | string                    | —                 | off        |\n| placeholder           | 占位符                                                                         | string                    | —                 | 请选择     |\n| filterable            | 是否可搜索                                                                     | boolean                   | —                 | false      |\n| allow-create          | 是否允许用户创建新条目，需配合 `filterable` 使用                               | boolean                   | —                 | false      |\n| filter-method         | 自定义搜索方法                                                                 | function                  | —                 | —          |\n| remote                | 是否为远程搜索                                                                 | boolean                   | —                 | false      |\n| remote-method         | 远程搜索方法                                                                   | function                  | —                 | —          |\n| loading               | 是否正在从远程获取数据                                                         | boolean                   | —                 | false      |\n| loading-text          | 远程加载时显示的文字                                                           | string                    | —                 | 加载中     |\n| no-match-text         | 搜索条件无匹配时显示的文字，也可以使用`slot="empty"`设置                       | string                    | —                 | 无匹配数据 |\n| no-data-text          | 选项为空时显示的文字，也可以使用`slot="empty"`设置                             | string                    | —                 | 无数据     |\n| popper-class          | Select 下拉框的类名                                                            | string                    | —                 | —          |\n| reserve-keyword       | 多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词                       | boolean                   | —                 | false      |\n| default-first-option  | 在输入框按下回车，选择第一个匹配项。需配合 `filterable` 或 `remote` 使用       | boolean                   | -                 | false      |\n| popper-append-to-body | 是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false | boolean                   | -                 | true       |\n| automatic-dropdown    | 对于不可搜索的 Select，是否在输入框获得焦点后自动弹出选项菜单                  | boolean                   | -                 | false      |\n\n### Select Events\n\n| 事件名称       | 说明                                     | 回调参数                      |\n| -------------- | ---------------------------------------- | ----------------------------- |\n| change         | 选中值发生变化时触发                     | 目前的选中值                  |\n| visible-change | 下拉框出现/隐藏时触发                    | 出现则为 true，隐藏则为 false |\n| remove-tag     | 多选模式下移除 tag 时触发                | 移除的 tag 值                 |\n| clear          | 可清空的单选模式下用户点击清空按钮时触发 | —                             |\n| blur           | 当 input 失去焦点时触发                  | (event: Event)                |\n| focus          | 当 input 获得焦点时触发                  | (event: Event)                |\n\n### Select Slots\n\n|   name  | 说明                |\n| ------- | ------------------- |\n| —       | Option 组件列表     |\n| prefix  | Select 组件头部内容 |\n| empty   | 无选项时的列表      |\n\n### Option Group Attributes\n\n| 参数     | 说明                           | 类型    | 可选值 | 默认值 |\n| -------- | ------------------------------ | ------- | ------ | ------ |\n| label    | 分组的组名                     | string  | —      | —      |\n| disabled | 是否将该分组下所有选项置为禁用 | boolean | —      | false  |\n\n### Option Attributes\n\n| 参数     | 说明                                      | 类型                 | 可选值 | 默认值 |\n| -------- | ----------------------------------------- | -------------------- | ------ | ------ |\n| value    | 选项的值                                  | string/number/object | —      | —      |\n| label    | 选项的标签，若不设置则默认与 `value` 相同 | string/number        | —      | —      |\n| disabled | 是否禁用该选项                            | boolean              | —      | false  |\n\n### Methods\n\n| 方法名 | 说明                            | 参数 |\n| ------ | ------------------------------- | ---- |\n| focus  | 使 input 获取焦点               | -    |\n| blur   | 使 input 失去焦点，并隐藏下拉框 | -    |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},bb8f:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## Dropdown 下拉菜单\n\n将动作或菜单折叠到下拉菜单中。\n\n### 基础用法\n\n移动到下拉菜单上，展开更多操作。\n\n:::demo 通过组件`slot`来设置下拉触发的元素以及需要通过具名`slot`为`dropdown` 来设置下拉菜单。默认情况下，下拉按钮只要`hover`即可，无需点击也会显示下拉菜单。\n\n```html\n<template>\n  <div style="padding: 0 24px">\n    <div style="margin-bottom:24px">\n      <pa-button style="margin-bottom:24px" @click="statuesChange"\n        >启用/禁用切换</pa-button\n      >\n      <br />\n      <span>禁用选择</span>\n      <pa-dropdown @command="changeVal" :disabled="disabled">\n        <span class="pa-dropdown-link">\n          菜单<i class="pa-icon-arrow-down pa-icon--right"></i>\n        </span>\n        <pa-dropdown-menu slot="dropdown">\n          <pa-dropdown-item command="黄金糕">黄金糕</pa-dropdown-item>\n          <pa-dropdown-item command="狮子头">狮子头</pa-dropdown-item>\n          <pa-dropdown-item command="螺蛳粉">螺蛳粉</pa-dropdown-item>\n          <pa-dropdown-item command="双皮奶">双皮奶</pa-dropdown-item>\n          <pa-dropdown-item command="蚵仔煎">蚵仔煎</pa-dropdown-item>\n        </pa-dropdown-menu>\n      </pa-dropdown>\n      <pa-input\n        style="display:inline-block;width:200px"\n        v-model="disabledVal"\n        disabled\n      />\n    </div>\n    <span>查看禁用</span>\n    <pa-dropdown>\n      <span class="pa-dropdown-link">\n        下拉菜单<i class="pa-icon-arrow-down pa-icon--right"></i>\n      </span>\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item command="黄金糕" :disabled="disabledVal === \'黄金糕\'"\n          >黄金糕</pa-dropdown-item\n        >\n        <pa-dropdown-item command="狮子头" :disabled="disabledVal === \'狮子头\'"\n          >狮子头</pa-dropdown-item\n        >\n        <pa-dropdown-item command="螺蛳粉" :disabled="disabledVal === \'螺蛳粉\'"\n          >螺蛳粉</pa-dropdown-item\n        >\n        <pa-dropdown-item command="双皮奶" :disabled="disabledVal === \'双皮奶\'"\n          >双皮奶</pa-dropdown-item\n        >\n        <pa-dropdown-item command="蚵仔煎" :disabled="disabledVal === \'蚵仔煎\'"\n          >蚵仔煎</pa-dropdown-item\n        >\n      </pa-dropdown-menu>\n    </pa-dropdown>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        radio: "1",\n        disabled: false,\n        disabledVal: "蚵仔煎",\n      };\n    },\n    methods: {\n      radioChanged(val) {\n        console.log(val);\n      },\n      statuesChange(val) {\n        this.disabled = !this.disabled;\n      },\n      changeVal(val) {\n        this.disabledVal = val;\n      },\n    },\n  };\n<\/script>\n<style>\n  .pa-dropdown-link {\n    cursor: pointer;\n    color: #409eff;\n  }\n  .pa-icon-arrow-down {\n    font-size: 12px;\n  }\n</style>\n```\n\n:::\n\n### 触发对象\n\n可使用按钮触发下拉菜单。\n\n:::demo 设置`split-button`属性来让触发下拉元素呈现为按钮组，左边是功能按钮，右边是触发下拉菜单的按钮，设置为`true`即可。\n\n```html\n<template>\n  <div style="padding: 0 24px">\n    <pa-dropdown>\n      <pa-button type="primary">\n        更多菜单<i class="pa-icon-arrow-down pa-icon--right"></i>\n      </pa-button>\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item>黄金糕</pa-dropdown-item>\n        <pa-dropdown-item>狮子头</pa-dropdown-item>\n        <pa-dropdown-item>螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n    <pa-dropdown split-button type="primary" @click="handleClick">\n      更多菜单\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item>黄金糕</pa-dropdown-item>\n        <pa-dropdown-item>狮子头</pa-dropdown-item>\n        <pa-dropdown-item>螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n  </div>\n</template>\n<style>\n  .pa-dropdown {\n    vertical-align: top;\n  }\n  .pa-dropdown + .pa-dropdown {\n    margin-left: 15px;\n  }\n  .pa-icon-arrow-down {\n    font-size: 12px;\n  }\n</style>\n\n<script>\n  export default {\n    methods: {\n      handleClick() {\n        console.log("dropdown click");\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 触发方式\n\n可以配置 click 激活或者 hover 激活。\n\n:::demo 在`trigger`属性设置为`click`即可。\n\n```html\n<template>\n  <el-row style="padding: 0 24px" class="block-col-2">\n    <el-col :span="12">\n      <span class="demonstration">hover 激活</span>\n      <pa-dropdown>\n        <span class="pa-dropdown-link">\n          下拉菜单<i class="pa-icon-arrow-down pa-icon--right"></i>\n        </span>\n        <pa-dropdown-menu slot="dropdown">\n          <pa-dropdown-item icon="pa-icon-plus">黄金糕</pa-dropdown-item>\n          <pa-dropdown-item icon="pa-icon-circle-plus">狮子头</pa-dropdown-item>\n          <pa-dropdown-item icon="pa-icon-circle-plus-outline"\n            >螺蛳粉</pa-dropdown-item\n          >\n          <pa-dropdown-item icon="pa-icon-check">双皮奶</pa-dropdown-item>\n          <pa-dropdown-item icon="pa-icon-circle-check"\n            >蚵仔煎</pa-dropdown-item\n          >\n        </pa-dropdown-menu>\n      </pa-dropdown>\n    </el-col>\n    <el-col :span="12">\n      <span class="demonstration">click 激活</span>\n      <pa-dropdown trigger="click">\n        <span class="pa-dropdown-link">\n          下拉菜单<i class="pa-icon-arrow-down pa-icon--right"></i>\n        </span>\n        <pa-dropdown-menu slot="dropdown">\n          <pa-dropdown-item icon="pa-icon-plus">黄金糕</pa-dropdown-item>\n          <pa-dropdown-item icon="pa-icon-circle-plus">狮子头</pa-dropdown-item>\n          <pa-dropdown-item icon="pa-icon-circle-plus-outline"\n            >螺蛳粉</pa-dropdown-item\n          >\n          <pa-dropdown-item icon="pa-icon-check">双皮奶</pa-dropdown-item>\n          <pa-dropdown-item icon="pa-icon-circle-check"\n            >蚵仔煎</pa-dropdown-item\n          >\n        </pa-dropdown-menu>\n      </pa-dropdown>\n    </el-col>\n  </el-row>\n</template>\n<style>\n  .pa-dropdown-link {\n    cursor: pointer;\n    color: #409eff;\n  }\n  .pa-icon-arrow-down {\n    font-size: 12px;\n  }\n  .demonstration {\n    display: block;\n    color: #8492a6;\n    font-size: 14px;\n    margin-bottom: 20px;\n  }\n</style>\n```\n\n:::\n\n### 菜单隐藏方式\n\n可以`hide-on-click`属性来配置。\n\n:::demo 下拉菜单默认在点击菜单项后会被隐藏，将`hide-on-click`属性默认为`false`可以关闭此功能。\n\n```html\n<template>\n  <div style="padding: 0 24px">\n    <pa-dropdown :hide-on-click="false">\n      <span class="pa-dropdown-link">\n        下拉菜单<i class="pa-icon-arrow-down pa-icon--right"></i>\n      </span>\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item>黄金糕</pa-dropdown-item>\n        <pa-dropdown-item>狮子头</pa-dropdown-item>\n        <pa-dropdown-item>螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item disabled>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item divided>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n  </div>\n</template>\n<style>\n  .pa-dropdown-link {\n    cursor: pointer;\n    color: #409eff;\n  }\n  .pa-icon-arrow-down {\n    font-size: 12px;\n  }\n</style>\n```\n\n:::\n\n### 指令事件\n\n点击菜单项后会触发事件，用户可以通过相应的菜单项 key 进行不同的操作\n\n:::demo\n\n```html\n<template>\n  <div style="padding: 0 24px">\n    <pa-dropdown @command="handleCommand">\n      <span class="pa-dropdown-link">\n        下拉菜单<i class="pa-icon-arrow-down pa-icon--right"></i>\n      </span>\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item command="a">黄金糕</pa-dropdown-item>\n        <pa-dropdown-item command="b">狮子头</pa-dropdown-item>\n        <pa-dropdown-item command="c">螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item command="d" disabled>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item command="e" divided>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n  </div>\n</template>\n<style>\n  .pa-dropdown-link {\n    cursor: pointer;\n    color: #409eff;\n  }\n  .pa-icon-arrow-down {\n    font-size: 12px;\n  }\n</style>\n\n<script>\n  export default {\n    methods: {\n      handleCommand(command) {\n        this.$message("click on item " + command);\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 不同尺寸\n\nDropdown 组件提供除了默认值以外的三种尺寸，可以在不同场景下选择合适的尺寸。\n\n:::demo 额外的尺寸：`medium`、`small`、`mini`，通过设置`size`属性来配置它们。\n\n```html\n<template>\n  <div style="padding: 0 24px">\n    <pa-dropdown split-button type="primary">\n      默认尺寸\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item>黄金糕</pa-dropdown-item>\n        <pa-dropdown-item>狮子头</pa-dropdown-item>\n        <pa-dropdown-item>螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n\n    <pa-dropdown size="medium" split-button type="primary">\n      中等尺寸\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item>黄金糕</pa-dropdown-item>\n        <pa-dropdown-item>狮子头</pa-dropdown-item>\n        <pa-dropdown-item>螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n\n    <pa-dropdown size="small" split-button type="primary">\n      小型尺寸\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item>黄金糕</pa-dropdown-item>\n        <pa-dropdown-item>狮子头</pa-dropdown-item>\n        <pa-dropdown-item>螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n\n    <pa-dropdown size="mini" split-button type="primary">\n      超小尺寸\n      <pa-dropdown-menu slot="dropdown">\n        <pa-dropdown-item>黄金糕</pa-dropdown-item>\n        <pa-dropdown-item>狮子头</pa-dropdown-item>\n        <pa-dropdown-item>螺蛳粉</pa-dropdown-item>\n        <pa-dropdown-item>双皮奶</pa-dropdown-item>\n        <pa-dropdown-item>蚵仔煎</pa-dropdown-item>\n      </pa-dropdown-menu>\n    </pa-dropdown>\n  </div>\n</template>\n```\n\n:::\n\n### Dropdown Attributes\n\n| 参数          | 说明                                                                                                     | 类型    | 可选值                                               | 默认值     |\n| ------------- | -------------------------------------------------------------------------------------------------------- | ------- | ---------------------------------------------------- | ---------- |\n| type          | 菜单按钮类型，同 Button 组件(只在`split-button`为 true 的情况下有效)                                     | string  | —                                                    | —          |\n| size          | 菜单尺寸，在`split-button`为 true 的情况下也对触发按钮生效                                               | string  | medium / small / mini                                | —          |\n| split-button  | 下拉触发元素呈现为按钮组                                                                                 | boolean | —                                                    | false      |\n| placement     | 菜单弹出位置                                                                                             | string  | top/top-start/top-end/bottom/bottom-start/bottom-end | bottom-end |\n| trigger       | 触发下拉的行为                                                                                           | string  | hover, click                                         | hover      |\n| hide-on-click | 是否在点击菜单项后隐藏菜单                                                                               | boolean | —                                                    | true       |\n| show-timeout  | 展开下拉菜单的延时（仅在 trigger 为 hover 时有效）                                                       | number  | —                                                    | 250        |\n| hide-timeout  | 收起下拉菜单的延时（仅在 trigger 为 hover 时有效）                                                       | number  | —                                                    | 150        |\n| tabindex      | Dropdown 组件的 [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) | number  | —                                                    | 0          |\n| disabled      | 是否禁用                                                                                                 | boolean | —                                                    | false      |\n\n### Dropdown Slots\n\n| Name     | 说明                                                       |\n| -------- | ---------------------------------------------------------- |\n| —        | 触发下拉列表显示的元素。 注意： 必须是一个元素或者或者组件 |\n| dropdown | 下拉列表，通常是 `<pa-dropdown-menu>` 组件                 |\n\n### Dropdown Events\n\n| 事件名称       | 说明                                          | 回调参数                      |\n| -------------- | --------------------------------------------- | ----------------------------- |\n| click          | `split-button` 为 true 时，点击左侧按钮的回调 | —                             |\n| command        | 点击菜单项触发的事件回调                      | dropdown-item 的指令          |\n| visible-change | 下拉框出现/隐藏时触发                         | 出现则为 true，隐藏则为 false |\n\n### Dropdown Menu Item Attributes\n\n| 参数     | 说明       | 类型                 | 可选值 | 默认值 |\n| -------- | ---------- | -------------------- | ------ | ------ |\n| command  | 指令       | string/number/object | —      | —      |\n| disabled | 禁用       | boolean              | —      | false  |\n| divided  | 显示分割线 | boolean              | —      | false  |\n| icon     | 图标类名   | string               | —      | —      |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},d10b:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## Radio 单选框\n\n在一组备选项中进行单选\n\n### 基础用法\n\n由于选项默认可见，不宜过多，若选项过多，建议使用 Select 选择器。\n\n:::demo 要使用 Radio 组件，只需要设置`v-model`绑定变量，选中意味着变量的值为相应 Radio `label`属性的值，`label`可以是`String`、`Number`或`Boolean`。\n\n```html\n<template>\n  <div style="padding:0 24px">\n    <div style="margin-bottom:24px">\n      <pa-button @click="statuesChange">启用/禁用切换</pa-button>\n    </div>\n    <pa-radio\n      v-model="radio"\n      :disabled="disabled"\n      @change="radioChanged"\n      label="1"\n      >备选项</pa-radio\n    >\n    <pa-radio\n      v-model="radio"\n      :disabled="disabled"\n      @change="radioChanged"\n      label="2"\n      >备选项</pa-radio\n    >\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        radio: "1",\n        disabled: false,\n      };\n    },\n    methods: {\n      radioChanged(val) {\n        console.log(val);\n      },\n      statuesChange(val) {\n        this.disabled = !this.disabled;\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 禁用状态\n\n单选框不可用的状态。\n\n:::demo 只要在`pa-radio`元素中设置`disabled`属性即可，它接受一个`Boolean`，`true`为禁用。\n\n```html\n<template>\n  <div style="padding:0 24px">\n    <pa-radio disabled v-model="radio" label="禁用">备选项</pa-radio>\n    <pa-radio disabled v-model="radio" label="选中且禁用">备选项</pa-radio>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        radio: "选中且禁用",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 单选框组\n\n适用于在多个互斥的选项中选择的场景\n\n:::demo 结合`pa-radio-group`元素和子元素`pa-radio`可以实现单选组，在`pa-radio-group`中绑定`v-model`，在`pa-radio`中设置好`label`即可，无需再给每一个`pa-radio`绑定变量，另外，还提供了`change`事件来响应变化，它会传入一个参数`value`。\n\n```html\n<template>\n  <div style="padding:0 24px">\n    <span>HTML形式</span>\n    <pa-radio-group v-model="radio" @change="changed">\n      <pa-radio :label="3">备选项</pa-radio>\n      <pa-radio :label="6">备选项</pa-radio>\n      <pa-radio :label="9">备选项</pa-radio>\n    </pa-radio-group>\n    <br />\n    <span>数 据 形 式</span>\n    \x3c!--labelFiled默认为label,textFiled默认为text--\x3e\n    <pa-radio-group\n      v-model="radio"\n      :groupList="groupList"\n      :labelFiled="\'key\'"\n      :textFiled="\'text\'"\n    ></pa-radio-group>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        radio: 3,\n        groupList: [\n          {\n            key: 3,\n            text: "备选项",\n          },\n          {\n            key: 6, //默认为label\n            text: "备选项", //默认为text\n            disabled: true,\n          },\n          {\n            key: 9,\n            text: "备选项",\n            border: true,\n            size: "small",\n          },\n        ],\n      };\n    },\n    methods: {\n      changed(val) {\n        console.log(val);\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 按钮样式\n\n按钮样式的单选组合。\n\n:::demo 只需要把`pa-radio`元素换成`pa-radio-button`元素即可，此外，Element 还提供了`size`属性。\n\n```html\n<template>\n  <div style="padding:0 24px">\n    <div>\n      <pa-radio-group v-model="radio1">\n        <pa-radio-button label="上海"></pa-radio-button>\n        <pa-radio-button label="北京"></pa-radio-button>\n        <pa-radio-button label="广州"></pa-radio-button>\n        <pa-radio-button label="深圳"></pa-radio-button>\n      </pa-radio-group>\n    </div>\n    <div style="margin-top: 20px">\n      <pa-radio-group v-model="radio2" size="medium">\n        <pa-radio-button label="上海"></pa-radio-button>\n        <pa-radio-button label="北京"></pa-radio-button>\n        <pa-radio-button label="广州"></pa-radio-button>\n        <pa-radio-button label="深圳"></pa-radio-button>\n      </pa-radio-group>\n    </div>\n    <div style="margin-top: 20px">\n      <pa-radio-group v-model="radio3" size="small">\n        <pa-radio-button label="上海"></pa-radio-button>\n        <pa-radio-button label="北京" disabled></pa-radio-button>\n        <pa-radio-button label="广州"></pa-radio-button>\n        <pa-radio-button label="深圳"></pa-radio-button>\n      </pa-radio-group>\n    </div>\n    <div style="margin-top: 20px">\n      <pa-radio-group v-model="radio4" disabled size="mini">\n        <pa-radio-button label="上海"></pa-radio-button>\n        <pa-radio-button label="北京"></pa-radio-button>\n        <pa-radio-button label="广州"></pa-radio-button>\n        <pa-radio-button label="深圳"></pa-radio-button>\n      </pa-radio-group>\n    </div>\n    <div style="margin-top: 20px">\n      \x3c!--labelFiled默认为label,textFiled默认为text--\x3e\n      <pa-radio-group\n        v-model="radio4"\n        :groupList="groupList"\n        labelFiled="key"\n        size="mini"\n        groupType="button"\n      >\n      </pa-radio-group>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        radio1: "上海",\n        radio2: "上海",\n        radio3: "上海",\n        radio4: "上海",\n        groupList: [\n          {\n            key: "上海",\n            text: "上海",\n          },\n          {\n            key: "北京", //默认为label\n            text: "北京", //默认为text\n            disabled: true,\n          },\n          {\n            key: "广州",\n            text: "广州",\n          },\n          {\n            key: "深圳",\n            text: "深圳",\n          },\n        ],\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 带有边框\n\n:::demo 设置`border`属性可以渲染为带有边框的单选框。\n\n```html\n<template>\n  <div style="padding:0 24px">\n    <div>\n      <pa-radio v-model="radio1" label="1" border>备选项1</pa-radio>\n      <pa-radio v-model="radio1" label="2" border>备选项2</pa-radio>\n    </div>\n    <div style="margin-top: 20px">\n      <pa-radio v-model="radio2" label="1" border size="medium"\n        >备选项1</pa-radio\n      >\n      <pa-radio v-model="radio2" label="2" border size="medium"\n        >备选项2</pa-radio\n      >\n    </div>\n    <div style="margin-top: 20px">\n      <pa-radio-group v-model="radio3" size="small">\n        <pa-radio label="1" border>备选项1</pa-radio>\n        <pa-radio label="2" border disabled>备选项2</pa-radio>\n      </pa-radio-group>\n    </div>\n    <div style="margin-top: 20px">\n      <pa-radio-group v-model="radio4" size="mini" disabled>\n        <pa-radio label="1" border>备选项1</pa-radio>\n        <pa-radio label="2" border>备选项2</pa-radio>\n      </pa-radio-group>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        radio1: "1",\n        radio2: "1",\n        radio3: "1",\n        radio4: "1",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### Radio Attributes\n\n| 参数            | 说明                                 | 类型                      | 可选值                | 默认值 |\n| --------------- | ------------------------------------ | ------------------------- | --------------------- | ------ |\n| value / v-model | 绑定值                               | string / number / boolean | —                     | —      |\n| label           | Radio 的 value                       | string / number / boolean | —                     | —      |\n| disabled        | 是否禁用                             | boolean                   | —                     | false  |\n| border          | 是否显示边框                         | boolean                   | —                     | false  |\n| size            | Radio 的尺寸，仅在 border 为真时有效 | string                    | medium / small / mini | —      |\n| name            | 原生 name 属性                       | string                    | —                     | —      |\n\n### Radio Events\n\n| 事件名称 | 说明                   | 回调参数              |\n| -------- | ---------------------- | --------------------- |\n| change   | 绑定值变化时触发的事件 | 选中的 Radio label 值 |\n\n### Radio-group Attributes\n\n| 参数            | 说明                                                       | 类型                      | 可选值                | 默认值  |\n| --------------- | ---------------------------------------------------------- | ------------------------- | --------------------- | ------- |\n| value / v-model | 绑定值                                                     | string / number / boolean | —                     | —       |\n| size            | 单选框组尺寸，仅对按钮形式的 Radio 或带有边框的 Radio 有效 | string                    | medium / small / mini | —       |\n| disabled        | 是否禁用                                                   | boolean                   | —                     | false   |\n| text-color      | 按钮形式的 Radio 激活时的文本颜色                          | string                    | —                     | #ffffff |\n| fill            | 按钮形式的 Radio 激活时的填充色和边框色                    | string                    | —                     | #409EFF |\n\n### Radio-group Events\n\n| 事件名称 | 说明                   | 回调参数              |\n| -------- | ---------------------- | --------------------- |\n| change   | 绑定值变化时触发的事件 | 选中的 Radio label 值 |\n\n### Radio-button Attributes\n\n| 参数     | 说明           | 类型            | 可选值 | 默认值 |\n| -------- | -------------- | --------------- | ------ | ------ |\n| label    | Radio 的 value | string / number | —      | —      |\n| disabled | 是否禁用       | boolean         | —      | false  |\n| name     | 原生 name 属性 | string          | —      | —      |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m},e7ab:function(n,e,a){"use strict";a.r(e);var t,l=a("bee2"),o=a("d4ec"),i=a("257e"),r=a("262e"),d=a("2caf"),s=a("ade3"),p=a("8d35"),u=a("2fe1"),c='## Input 输入框\n\n通过鼠标或键盘输入字符\n\n:::warning\nInput 为受控组件，它**总会显示 Vue 绑定值**。\n\n通常情况下，应当处理 `input` 事件，并更新组件的绑定值（或使用`v-model`）。否则，输入框内显示的值将不会改变。\n\n不支持 `v-model` 修饰符。\n:::\n\n### 基础用法\n\n:::demo\n\n```html\n<template>\n  <pa-input-s\n    style="width:230px"\n    v-model="input"\n    placeholder="请输入内容"\n  ></pa-input-s>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        input: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 禁用状态\n\n:::demo 通过 `disabled` 属性指定是否禁用 input 组件\n\n```html\n<template>\n  <div>\n    <pa-button @click="changeDisabled">启用/禁用</pa-button>\n    <pa-input-s\n      style="width:230px"\n      placeholder="请输入内容"\n      v-model="input"\n      :disabled="disabled"\n    >\n    </pa-input-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        input: "",\n        disabled: false,\n      };\n    },\n    methods: {\n      changeDisabled() {\n        this.disabled = !this.disabled;\n      },\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 可清空\n\n:::demo 使用`clearable`属性即可得到一个可清空的输入框\n\n```html\n<template>\n  <pa-input-s\n    style="width:230px"\n    placeholder="请输入内容"\n    v-model="input"\n    clearable\n  >\n  </pa-input-s>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        input: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 密码框\n\n:::demo 使用`show-password`属性即可得到一个可切换显示隐藏的密码框\n\n```html\n<template>\n  <pa-input-s\n    style="width:230px"\n    placeholder="请输入密码"\n    v-model="input"\n    show-password\n  ></pa-input-s>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        input: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 带 icon 的输入框\n\n带有图标标记输入类型\n\n:::demo 可以通过 `prefix-icon` 和 `suffix-icon` 属性在 input 组件首部和尾部增加显示图标，也可以通过 slot 来放置图标。\n\n```html\n<template>\n  <div>\n    <div class="demo-input-suffix">\n      属性方式：\n      <pa-input-s\n        placeholder="请选择日期"\n        style="width:230px"\n        suffix-icon="el-icon-search"\n        v-model="input1"\n      >\n      </pa-input-s>\n      <pa-input-s\n        placeholder="请输入内容"\n        style="width:230px"\n        prefix-icon="el-icon-search"\n        v-model="input2"\n      >\n      </pa-input-s>\n    </div>\n    <div class="demo-input-suffix">\n      slot 方式：\n      <pa-input-s style="width:230px" placeholder="请选择日期" v-model="input3">\n        <pa-icon slot="suffix" name="icon-koufenzhi"></pa-icon>\n      </pa-input-s>\n      <pa-input-s style="width:230px" placeholder="请输入内容" v-model="input4">\n        <pa-icon slot="prefix" name="icon-koufenzhi"></pa-icon>\n      </pa-input-s>\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        input1: "",\n        input2: "",\n        input3: "",\n        input4: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 文本域\n\n用于输入多行文本信息，通过将 `type` 属性的值指定为 textarea。\n\n:::demo 文本域高度可通过 `rows` 属性控制\n\n```html\n<template>\n  <pa-input-s\n    type="textarea"\n    style="width:230px"\n    :rows="2"\n    placeholder="请输入内容"\n    v-model="textarea"\n  >\n  </pa-input-s>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        textarea: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 可自适应文本高度的文本域\n\n通过设置 `autosize` 属性可以使得文本域的高度能够根据文本内容自动进行调整，并且 `autosize` 还可以设定为一个对象，指定最小行数和最大行数。\n\n:::demo\n\n```html\n<template>\n  <div>\n    <pa-input-s\n      type="textarea"\n      style="width:230px"\n      autosize\n      placeholder="请输入内容"\n      v-model="textarea1"\n    >\n    </pa-input-s>\n    <div style="margin: 20px 0;"></div>\n    <pa-input-s\n      type="textarea"\n      style="width:230px"\n      :autosize="{ minRows: 2, maxRows: 4}"\n      placeholder="请输入内容"\n      v-model="textarea2"\n    >\n    </pa-input-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        textarea1: "",\n        textarea2: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 复合型输入框\n\n可前置或后置元素，一般为标签或按钮\n\n:::demo 可通过 slot 来指定在 input 中前置或者后置内容。\n\n```html\n<template>\n  <div>\n    <div>\n      <pa-input-s style="width:530px" placeholder="请输入内容" v-model="input1">\n        <template slot="prepend">Http://</template>\n      </pa-input-s>\n    </div>\n    <div style="margin-top: 15px;">\n      <pa-input-s style="width:530px" placeholder="请输入内容" v-model="input2">\n        <template slot="append">.com</template>\n      </pa-input-s>\n    </div>\n    <div style="margin-top: 15px;">\n      <pa-input-s\n        placeholder="请输入内容"\n        style="width:530px"\n        v-model="input3"\n        class="input-with-select"\n      >\n        <pa-select\n          v-model="select"\n          style="width:130px"\n          slot="prepend"\n          placeholder="请选择"\n        >\n          <pa-option label="餐厅名" value="1"></pa-option>\n          <pa-option label="订单号" value="2"></pa-option>\n          <pa-option label="用户电话" value="3"></pa-option>\n        </pa-select>\n        <pa-button slot="append" icon="pa-icon-search">搜索</pa-button>\n      </pa-input-s>\n    </div>\n  </div>\n</template>\n<style>\n  .pa-select .pa-input {\n    width: 130px;\n  }\n  .input-with-select .pa-input-group__prepend {\n    background-color: #fff;\n  }\n</style>\n<script>\n  export default {\n    data() {\n      return {\n        input1: "",\n        input2: "",\n        input3: "",\n        select: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 尺寸\n\n:::demo 可通过 `size` 属性指定输入框的尺寸，除了默认的大小外，还提供了 large、small 和 mini 三种尺寸。\n\n```html\n<template>\n  <div class="demo-input-size">\n    <pa-input-s\n      placeholder="请输入内容"\n      style="width:230px"\n      suffix-icon="el-icon-search"\n      v-model="input1"\n    >\n    </pa-input-s>\n    <pa-input-s\n      size="medium"\n      style="width:230px"\n      placeholder="请输入内容"\n      suffix-icon="el-icon-search"\n      v-model="input2"\n    >\n    </pa-input-s>\n    <pa-input-s\n      size="small"\n      style="width:230px"\n      placeholder="请输入内容"\n      suffix-icon="el-icon-search"\n      v-model="input3"\n    >\n    </pa-input-s>\n    <pa-input-s\n      size="mini"\n      style="width:230px"\n      placeholder="请输入内容"\n      suffix-icon="el-icon-search"\n      v-model="input4"\n      prefix-icon="el-icon-search"\n    >\n    </pa-input-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        input1: "",\n        input2: "",\n        input3: "",\n        input4: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 带输入建议\n\n根据输入内容提供对应的输入建议\n\n:::demo autocomplete 是一个可带输入建议的输入框组件，`fetch-suggestions` 是一个返回输入建议的方法属性，如 querySearch(queryString, cb)，在该方法中你可以在你的输入建议数据准备好时通过 cb(data) 返回到 autocomplete 组件中。\n\n```html\n<template>\n  <el-row class="demo-autocomplete">\n    <el-col :span="12">\n      <div class="sub-title">激活即列出输入建议</div>\n      <pa-autocomplete\n        class="inline-input"\n        v-model="state1"\n        :fetch-suggestions="querySearch"\n        placeholder="请输入内容"\n        @select="handleSelect"\n      ></pa-autocomplete>\n    </el-col>\n    <el-col :span="12">\n      <div class="sub-title">输入后匹配输入建议</div>\n      <pa-autocomplete\n        class="inline-input"\n        v-model="state2"\n        :fetch-suggestions="querySearch"\n        placeholder="请输入内容"\n        :trigger-on-focus="false"\n        @select="handleSelect"\n      ></pa-autocomplete>\n    </el-col>\n  </el-row>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        restaurants: [],\n        state1: "",\n        state2: "",\n      };\n    },\n    methods: {\n      querySearch(queryString, cb) {\n        var restaurants = this.restaurants;\n        var results = queryString\n          ? restaurants.filter(this.createFilter(queryString))\n          : restaurants;\n        // 调用 callback 返回建议列表的数据\n        cb(results);\n      },\n      createFilter(queryString) {\n        return (restaurant) => {\n          return (\n            restaurant.value\n              .toLowerCase()\n              .indexOf(queryString.toLowerCase()) === 0\n          );\n        };\n      },\n      loadAll() {\n        return [\n          { value: "三全鲜食（北新泾店）", address: "长宁区新渔路144号" },\n          {\n            value: "Hot honey 首尔炸鸡（仙霞路）",\n            address: "上海市长宁区淞虹路661号",\n          },\n          {\n            value: "新旺角茶餐厅",\n            address: "上海市普陀区真北路988号创邑金沙谷6号楼113",\n          },\n          { value: "泷千家(天山西路店)", address: "天山西路438号" },\n          {\n            value: "胖仙女纸杯蛋糕（上海凌空店）",\n            address: "上海市长宁区金钟路968号1幢18号楼一层商铺18-101",\n          },\n          { value: "贡茶", address: "上海市长宁区金钟路633号" },\n          {\n            value: "豪大大香鸡排超级奶爸",\n            address: "上海市嘉定区曹安公路曹安路1685号",\n          },\n          {\n            value: "茶芝兰（奶茶，手抓饼）",\n            address: "上海市普陀区同普路1435号",\n          },\n          { value: "十二泷町", address: "上海市北翟路1444弄81号B幢-107" },\n          { value: "星移浓缩咖啡", address: "上海市嘉定区新郁路817号" },\n          { value: "阿姨奶茶/豪大大", address: "嘉定区曹安路1611号" },\n          { value: "新麦甜四季甜品炸鸡", address: "嘉定区曹安公路2383弄55号" },\n          {\n            value: "Monica摩托主题咖啡店",\n            address: "嘉定区江桥镇曹安公路2409号1F，2383弄62号1F",\n          },\n          {\n            value: "浮生若茶（凌空soho店）",\n            address: "上海长宁区金钟路968号9号楼地下一层",\n          },\n          {\n            value: "NONO JUICE  鲜榨果汁",\n            address: "上海市长宁区天山西路119号",\n          },\n          { value: "CoCo都可(北新泾店）", address: "上海市长宁区仙霞西路" },\n          {\n            value: "快乐柠檬（神州智慧店）",\n            address: "上海市长宁区天山西路567号1层R117号店铺",\n          },\n          {\n            value: "Merci Paul cafe",\n            address: "上海市普陀区光复西路丹巴路28弄6号楼819",\n          },\n          {\n            value: "猫山王（西郊百联店）",\n            address: "上海市长宁区仙霞西路88号第一层G05-F01-1-306",\n          },\n          { value: "枪会山", address: "上海市普陀区棕榈路" },\n          { value: "纵食", address: "元丰天山花园(东门) 双流路267号" },\n          { value: "钱记", address: "上海市长宁区天山西路" },\n          { value: "壹杯加", address: "上海市长宁区通协路" },\n          {\n            value: "唦哇嘀咖",\n            address: "上海市长宁区新泾镇金钟路999号2幢（B幢）第01层第1-02A单元",\n          },\n          { value: "爱茜茜里(西郊百联)", address: "长宁区仙霞西路88号1305室" },\n          {\n            value: "爱茜茜里(近铁广场)",\n            address:\n              "上海市普陀区真北路818号近铁城市广场北区地下二楼N-B2-O2-C商铺",\n          },\n          {\n            value: "鲜果榨汁（金沙江路和美广店）",\n            address: "普陀区金沙江路2239号金沙和美广场B1-10-6",\n          },\n          {\n            value: "开心丽果（缤谷店）",\n            address: "上海市长宁区威宁路天山路341号",\n          },\n          { value: "超级鸡车（丰庄路店）", address: "上海市嘉定区丰庄路240号" },\n          { value: "妙生活果园（北新泾店）", address: "长宁区新渔路144号" },\n          { value: "香宜度麻辣香锅", address: "长宁区淞虹路148号" },\n          {\n            value: "凡仔汉堡（老真北路店）",\n            address: "上海市普陀区老真北路160号",\n          },\n          { value: "港式小铺", address: "上海市长宁区金钟路968号15楼15-105室" },\n          { value: "蜀香源麻辣香锅（剑河路店）", address: "剑河路443-1" },\n          { value: "北京饺子馆", address: "长宁区北新泾街道天山西路490-1号" },\n          {\n            value: "饭典*新简餐（凌空SOHO店）",\n            address: "上海市长宁区金钟路968号9号楼地下一层9-83室",\n          },\n          {\n            value: "焦耳·川式快餐（金钟路店）",\n            address: "上海市金钟路633号地下一层甲部",\n          },\n          { value: "动力鸡车", address: "长宁区仙霞西路299弄3号101B" },\n          { value: "浏阳蒸菜", address: "天山西路430号" },\n          { value: "四海游龙（天山西路店）", address: "上海市长宁区天山西路" },\n          {\n            value: "樱花食堂（凌空店）",\n            address: "上海市长宁区金钟路968号15楼15-105室",\n          },\n          { value: "壹分米客家传统调制米粉(天山店)", address: "天山西路428号" },\n          {\n            value: "福荣祥烧腊（平溪路店）",\n            address: "上海市长宁区协和路福泉路255弄57-73号",\n          },\n          {\n            value: "速记黄焖鸡米饭",\n            address: "上海市长宁区北新泾街道金钟路180号1层01号摊位",\n          },\n          { value: "红辣椒麻辣烫", address: "上海市长宁区天山西路492号" },\n          {\n            value: "(小杨生煎)西郊百联餐厅",\n            address: "长宁区仙霞西路88号百联2楼",\n          },\n          { value: "阳阳麻辣烫", address: "天山西路389号" },\n          {\n            value: "南拳妈妈龙虾盖浇饭",\n            address: "普陀区金沙江路1699号鑫乐惠美食广场A13",\n          },\n        ];\n      },\n      handleSelect(item) {\n        console.log(item);\n      },\n    },\n    mounted() {\n      this.restaurants = this.loadAll();\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 自定义模板\n\n可自定义输入建议的显示\n\n:::demo 使用`scoped slot`自定义输入建议的模板。该 scope 的参数为`item`，表示当前输入建议对象。\n\n```html\n<template>\n  <pa-autocomplete\n    popper-class="my-autocomplete"\n    v-model="state"\n    :fetch-suggestions="querySearch"\n    placeholder="请输入内容"\n    @select="handleSelect"\n  >\n    <i\n      class="pa-icon-edit pa-input__icon"\n      slot="suffix"\n      @click="handleIconClick"\n    >\n    </i>\n    <template slot-scope="{ item }">\n      <div class="name">{{ item.value }}</div>\n      <span class="addr">{{ item.address }}</span>\n    </template>\n  </pa-autocomplete>\n</template>\n<style>\n  .my-autocomplete li {\n    line-height: normal;\n    padding: 7px;\n  }\n  .my-autocomplete li .name {\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n  .my-autocomplete li .addr {\n    font-size: 12px;\n    color: #b4b4b4;\n  }\n\n  .my-autocomplete li .highlighted .addr {\n    color: #ddd;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        restaurants: [],\n        state: "",\n      };\n    },\n    methods: {\n      querySearch(queryString, cb) {\n        var restaurants = this.restaurants;\n        var results = queryString\n          ? restaurants.filter(this.createFilter(queryString))\n          : restaurants;\n        // 调用 callback 返回建议列表的数据\n        cb(results);\n      },\n      createFilter(queryString) {\n        return (restaurant) => {\n          return (\n            restaurant.value\n              .toLowerCase()\n              .indexOf(queryString.toLowerCase()) === 0\n          );\n        };\n      },\n      loadAll() {\n        return [\n          { value: "三全鲜食（北新泾店）", address: "长宁区新渔路144号" },\n          {\n            value: "Hot honey 首尔炸鸡（仙霞路）",\n            address: "上海市长宁区淞虹路661号",\n          },\n          {\n            value: "新旺角茶餐厅",\n            address: "上海市普陀区真北路988号创邑金沙谷6号楼113",\n          },\n          { value: "泷千家(天山西路店)", address: "天山西路438号" },\n          {\n            value: "胖仙女纸杯蛋糕（上海凌空店）",\n            address: "上海市长宁区金钟路968号1幢18号楼一层商铺18-101",\n          },\n          { value: "贡茶", address: "上海市长宁区金钟路633号" },\n          {\n            value: "豪大大香鸡排超级奶爸",\n            address: "上海市嘉定区曹安公路曹安路1685号",\n          },\n          {\n            value: "茶芝兰（奶茶，手抓饼）",\n            address: "上海市普陀区同普路1435号",\n          },\n          { value: "十二泷町", address: "上海市北翟路1444弄81号B幢-107" },\n          { value: "星移浓缩咖啡", address: "上海市嘉定区新郁路817号" },\n          { value: "阿姨奶茶/豪大大", address: "嘉定区曹安路1611号" },\n          { value: "新麦甜四季甜品炸鸡", address: "嘉定区曹安公路2383弄55号" },\n          {\n            value: "Monica摩托主题咖啡店",\n            address: "嘉定区江桥镇曹安公路2409号1F，2383弄62号1F",\n          },\n          {\n            value: "浮生若茶（凌空soho店）",\n            address: "上海长宁区金钟路968号9号楼地下一层",\n          },\n          {\n            value: "NONO JUICE  鲜榨果汁",\n            address: "上海市长宁区天山西路119号",\n          },\n          { value: "CoCo都可(北新泾店）", address: "上海市长宁区仙霞西路" },\n          {\n            value: "快乐柠檬（神州智慧店）",\n            address: "上海市长宁区天山西路567号1层R117号店铺",\n          },\n          {\n            value: "Merci Paul cafe",\n            address: "上海市普陀区光复西路丹巴路28弄6号楼819",\n          },\n          {\n            value: "猫山王（西郊百联店）",\n            address: "上海市长宁区仙霞西路88号第一层G05-F01-1-306",\n          },\n          { value: "枪会山", address: "上海市普陀区棕榈路" },\n          { value: "纵食", address: "元丰天山花园(东门) 双流路267号" },\n          { value: "钱记", address: "上海市长宁区天山西路" },\n          { value: "壹杯加", address: "上海市长宁区通协路" },\n          {\n            value: "唦哇嘀咖",\n            address: "上海市长宁区新泾镇金钟路999号2幢（B幢）第01层第1-02A单元",\n          },\n          { value: "爱茜茜里(西郊百联)", address: "长宁区仙霞西路88号1305室" },\n          {\n            value: "爱茜茜里(近铁广场)",\n            address:\n              "上海市普陀区真北路818号近铁城市广场北区地下二楼N-B2-O2-C商铺",\n          },\n          {\n            value: "鲜果榨汁（金沙江路和美广店）",\n            address: "普陀区金沙江路2239号金沙和美广场B1-10-6",\n          },\n          {\n            value: "开心丽果（缤谷店）",\n            address: "上海市长宁区威宁路天山路341号",\n          },\n          { value: "超级鸡车（丰庄路店）", address: "上海市嘉定区丰庄路240号" },\n          { value: "妙生活果园（北新泾店）", address: "长宁区新渔路144号" },\n          { value: "香宜度麻辣香锅", address: "长宁区淞虹路148号" },\n          {\n            value: "凡仔汉堡（老真北路店）",\n            address: "上海市普陀区老真北路160号",\n          },\n          { value: "港式小铺", address: "上海市长宁区金钟路968号15楼15-105室" },\n          { value: "蜀香源麻辣香锅（剑河路店）", address: "剑河路443-1" },\n          { value: "北京饺子馆", address: "长宁区北新泾街道天山西路490-1号" },\n          {\n            value: "饭典*新简餐（凌空SOHO店）",\n            address: "上海市长宁区金钟路968号9号楼地下一层9-83室",\n          },\n          {\n            value: "焦耳·川式快餐（金钟路店）",\n            address: "上海市金钟路633号地下一层甲部",\n          },\n          { value: "动力鸡车", address: "长宁区仙霞西路299弄3号101B" },\n          { value: "浏阳蒸菜", address: "天山西路430号" },\n          { value: "四海游龙（天山西路店）", address: "上海市长宁区天山西路" },\n          {\n            value: "樱花食堂（凌空店）",\n            address: "上海市长宁区金钟路968号15楼15-105室",\n          },\n          { value: "壹分米客家传统调制米粉(天山店)", address: "天山西路428号" },\n          {\n            value: "福荣祥烧腊（平溪路店）",\n            address: "上海市长宁区协和路福泉路255弄57-73号",\n          },\n          {\n            value: "速记黄焖鸡米饭",\n            address: "上海市长宁区北新泾街道金钟路180号1层01号摊位",\n          },\n          { value: "红辣椒麻辣烫", address: "上海市长宁区天山西路492号" },\n          {\n            value: "(小杨生煎)西郊百联餐厅",\n            address: "长宁区仙霞西路88号百联2楼",\n          },\n          { value: "阳阳麻辣烫", address: "天山西路389号" },\n          {\n            value: "南拳妈妈龙虾盖浇饭",\n            address: "普陀区金沙江路1699号鑫乐惠美食广场A13",\n          },\n        ];\n      },\n      handleSelect(item) {\n        console.log(item);\n      },\n      handleIconClick(ev) {\n        console.log(ev);\n      },\n    },\n    mounted() {\n      this.restaurants = this.loadAll();\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 远程搜索\n\n从服务端搜索数据\n\n:::demo\n\n```html\n<template>\n  <pa-autocomplete\n    v-model="state"\n    :fetch-suggestions="querySearchAsync"\n    placeholder="请输入内容"\n    @select="handleSelect"\n  ></pa-autocomplete>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        restaurants: [],\n        state: "",\n        timeout: null,\n      };\n    },\n    methods: {\n      loadAll() {\n        return [\n          { value: "三全鲜食（北新泾店）", address: "长宁区新渔路144号" },\n          {\n            value: "Hot honey 首尔炸鸡（仙霞路）",\n            address: "上海市长宁区淞虹路661号",\n          },\n          {\n            value: "新旺角茶餐厅",\n            address: "上海市普陀区真北路988号创邑金沙谷6号楼113",\n          },\n          { value: "泷千家(天山西路店)", address: "天山西路438号" },\n          {\n            value: "胖仙女纸杯蛋糕（上海凌空店）",\n            address: "上海市长宁区金钟路968号1幢18号楼一层商铺18-101",\n          },\n          { value: "贡茶", address: "上海市长宁区金钟路633号" },\n          {\n            value: "豪大大香鸡排超级奶爸",\n            address: "上海市嘉定区曹安公路曹安路1685号",\n          },\n          {\n            value: "茶芝兰（奶茶，手抓饼）",\n            address: "上海市普陀区同普路1435号",\n          },\n          { value: "十二泷町", address: "上海市北翟路1444弄81号B幢-107" },\n          { value: "星移浓缩咖啡", address: "上海市嘉定区新郁路817号" },\n          { value: "阿姨奶茶/豪大大", address: "嘉定区曹安路1611号" },\n          { value: "新麦甜四季甜品炸鸡", address: "嘉定区曹安公路2383弄55号" },\n          {\n            value: "Monica摩托主题咖啡店",\n            address: "嘉定区江桥镇曹安公路2409号1F，2383弄62号1F",\n          },\n          {\n            value: "浮生若茶（凌空soho店）",\n            address: "上海长宁区金钟路968号9号楼地下一层",\n          },\n          {\n            value: "NONO JUICE  鲜榨果汁",\n            address: "上海市长宁区天山西路119号",\n          },\n          { value: "CoCo都可(北新泾店）", address: "上海市长宁区仙霞西路" },\n          {\n            value: "快乐柠檬（神州智慧店）",\n            address: "上海市长宁区天山西路567号1层R117号店铺",\n          },\n          {\n            value: "Merci Paul cafe",\n            address: "上海市普陀区光复西路丹巴路28弄6号楼819",\n          },\n          {\n            value: "猫山王（西郊百联店）",\n            address: "上海市长宁区仙霞西路88号第一层G05-F01-1-306",\n          },\n          { value: "枪会山", address: "上海市普陀区棕榈路" },\n          { value: "纵食", address: "元丰天山花园(东门) 双流路267号" },\n          { value: "钱记", address: "上海市长宁区天山西路" },\n          { value: "壹杯加", address: "上海市长宁区通协路" },\n          {\n            value: "唦哇嘀咖",\n            address: "上海市长宁区新泾镇金钟路999号2幢（B幢）第01层第1-02A单元",\n          },\n          { value: "爱茜茜里(西郊百联)", address: "长宁区仙霞西路88号1305室" },\n          {\n            value: "爱茜茜里(近铁广场)",\n            address:\n              "上海市普陀区真北路818号近铁城市广场北区地下二楼N-B2-O2-C商铺",\n          },\n          {\n            value: "鲜果榨汁（金沙江路和美广店）",\n            address: "普陀区金沙江路2239号金沙和美广场B1-10-6",\n          },\n          {\n            value: "开心丽果（缤谷店）",\n            address: "上海市长宁区威宁路天山路341号",\n          },\n          { value: "超级鸡车（丰庄路店）", address: "上海市嘉定区丰庄路240号" },\n          { value: "妙生活果园（北新泾店）", address: "长宁区新渔路144号" },\n          { value: "香宜度麻辣香锅", address: "长宁区淞虹路148号" },\n          {\n            value: "凡仔汉堡（老真北路店）",\n            address: "上海市普陀区老真北路160号",\n          },\n          { value: "港式小铺", address: "上海市长宁区金钟路968号15楼15-105室" },\n          { value: "蜀香源麻辣香锅（剑河路店）", address: "剑河路443-1" },\n          { value: "北京饺子馆", address: "长宁区北新泾街道天山西路490-1号" },\n          {\n            value: "饭典*新简餐（凌空SOHO店）",\n            address: "上海市长宁区金钟路968号9号楼地下一层9-83室",\n          },\n          {\n            value: "焦耳·川式快餐（金钟路店）",\n            address: "上海市金钟路633号地下一层甲部",\n          },\n          { value: "动力鸡车", address: "长宁区仙霞西路299弄3号101B" },\n          { value: "浏阳蒸菜", address: "天山西路430号" },\n          { value: "四海游龙（天山西路店）", address: "上海市长宁区天山西路" },\n          {\n            value: "樱花食堂（凌空店）",\n            address: "上海市长宁区金钟路968号15楼15-105室",\n          },\n          { value: "壹分米客家传统调制米粉(天山店)", address: "天山西路428号" },\n          {\n            value: "福荣祥烧腊（平溪路店）",\n            address: "上海市长宁区协和路福泉路255弄57-73号",\n          },\n          {\n            value: "速记黄焖鸡米饭",\n            address: "上海市长宁区北新泾街道金钟路180号1层01号摊位",\n          },\n          { value: "红辣椒麻辣烫", address: "上海市长宁区天山西路492号" },\n          {\n            value: "(小杨生煎)西郊百联餐厅",\n            address: "长宁区仙霞西路88号百联2楼",\n          },\n          { value: "阳阳麻辣烫", address: "天山西路389号" },\n          {\n            value: "南拳妈妈龙虾盖浇饭",\n            address: "普陀区金沙江路1699号鑫乐惠美食广场A13",\n          },\n        ];\n      },\n      querySearchAsync(queryString, cb) {\n        var restaurants = this.restaurants;\n        var results = queryString\n          ? restaurants.filter(this.createStateFilter(queryString))\n          : restaurants;\n\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n          cb(results);\n        }, 3000 * Math.random());\n      },\n      createStateFilter(queryString) {\n        return (state) => {\n          return (\n            state.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0\n          );\n        };\n      },\n      handleSelect(item) {\n        console.log(item);\n      },\n    },\n    mounted() {\n      this.restaurants = this.loadAll();\n    },\n  };\n<\/script>\n```\n\n:::\n\n### 输入长度限制\n\n:::demo `maxlength` 和 `minlength` 是原生属性，用来限制输入框的字符长度，其中字符长度是用 Javascript 的字符串长度统计的。对于类型为 `text` 或 `textarea` 的输入框，在使用 `maxlength` 属性限制最大输入长度的同时，可通过设置 `show-word-limit` 属性来展示字数统计。\n\n```html\n<template>\n  <div>\n    <pa-input-s\n      type="text"\n      placeholder="请输入内容"\n      v-model="text"\n      maxlength="10"\n      style="width:230px"\n      show-word-limit\n    >\n    </pa-input-s>\n    <div style="margin: 20px 0;"></div>\n    <pa-input-s\n      type="textarea"\n      placeholder="请输入内容"\n      v-model="textarea"\n      style="width:230px"\n      maxlength="30"\n      show-word-limit\n    >\n    </pa-input-s>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        text: "",\n        textarea: "",\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### Input Attributes\n\n| 参数            | 说明                                                                                    | 类型             | 可选值                                                                                                                                | 默认值 |\n| --------------- | --------------------------------------------------------------------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ------ |\n| type            | 类型                                                                                    | string           | text，textarea 和其他 [原生 input 的 type 值](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types) | text   |\n| value / v-model | 绑定值                                                                                  | string / number  | —                                                                                                                                     | —      |\n| maxlength       | 原生属性，最大输入长度                                                                  | number           | —                                                                                                                                     | —      |\n| minlength       | 原生属性，最小输入长度                                                                  | number           | —                                                                                                                                     | —      |\n| show-word-limit | 是否显示输入字数统计，只在 `type = "text"` 或 `type = "textarea"` 时有效                | boolean          | —                                                                                                                                     | false  |\n| placeholder     | 输入框占位文本                                                                          | string           | —                                                                                                                                     | —      |\n| clearable       | 是否可清空                                                                              | boolean          | —                                                                                                                                     | false  |\n| show-password   | 是否显示切换密码图标                                                                    | boolean          | —                                                                                                                                     | false  |\n| disabled        | 禁用                                                                                    | boolean          | —                                                                                                                                     | false  |\n| size            | 输入框尺寸，只在 `type!="textarea"` 时有效                                              | string           | medium / small / mini                                                                                                                 | —      |\n| prefix-icon     | 输入框头部图标                                                                          | string           | —                                                                                                                                     | —      |\n| suffix-icon     | 输入框尾部图标                                                                          | string           | —                                                                                                                                     | —      |\n| rows            | 输入框行数，只对 `type="textarea"` 有效                                                 | number           | —                                                                                                                                     | 2      |\n| autosize        | 自适应内容高度，只对 `type="textarea"` 有效，可传入对象，如，{ minRows: 2, maxRows: 6 } | boolean / object | —                                                                                                                                     | false  |\n| autocomplete    | 原生属性，自动补全                                                                      | string           | on, off                                                                                                                               | off    |\n| auto-complete   | 下个主版本弃用                                                                          | string           | on, off                                                                                                                               | off    |\n| name            | 原生属性                                                                                | string           | —                                                                                                                                     | —      |\n| readonly        | 原生属性，是否只读                                                                      | boolean          | —                                                                                                                                     | false  |\n| max             | 原生属性，设置最大值                                                                    | —                | —                                                                                                                                     | —      |\n| min             | 原生属性，设置最小值                                                                    | —                | —                                                                                                                                     | —      |\n| step            | 原生属性，设置输入字段的合法数字间隔                                                    | —                | —                                                                                                                                     | —      |\n| resize          | 控制是否能被用户缩放                                                                    | string           | none, both, horizontal, vertical                                                                                                      | —      |\n| autofocus       | 原生属性，自动获取焦点                                                                  | boolean          | true, false                                                                                                                           | false  |\n| form            | 原生属性                                                                                | string           | —                                                                                                                                     | —      |\n| label           | 输入框关联的 label 文字                                                                 | string           | —                                                                                                                                     | —      |\n| tabindex        | 输入框的 tabindex                                                                       | string           | -                                                                                                                                     | -      |\n| validate-event  | 输入时是否触发表单的校验                                                                | boolean          | -                                                                                                                                     | true   |\n\n### Input Slots\n\n| name    | 说明                                    |\n| ------- | --------------------------------------- |\n| prefix  | 输入框头部内容，只对 `type="text"` 有效 |\n| suffix  | 输入框尾部内容，只对 `type="text"` 有效 |\n| prepend | 输入框前置内容，只对 `type="text"` 有效 |\n| append  | 输入框后置内容，只对 `type="text"` 有效 |\n\n### Input Events\n\n| 事件名称 | 说明                                          | 回调参数                  |\n| -------- | --------------------------------------------- | ------------------------- |\n| blur     | 在 Input 失去焦点时触发                       | (event: Event)            |\n| focus    | 在 Input 获得焦点时触发                       | (event: Event)            |\n| change   | 仅在输入框失去焦点或用户按下回车时触发        | (value: string \\| number) |\n| input    | 在 Input 值改变时触发                         | (value: string \\| number) |\n| clear    | 在点击由 `clearable` 属性生成的清空按钮时触发 | —                         |\n\n### Input Methods\n\n| 方法名 | 说明                | 参数 |\n| ------ | ------------------- | ---- |\n| focus  | 使 input 获取焦点   | —    |\n| blur   | 使 input 失去焦点   | —    |\n| select | 选中 input 中的文字 | —    |\n\n### Autocomplete Attributes\n\n| 参数                  | 说明                                                                                     | 类型                            | 可选值                                                         | 默认值       |\n| --------------------- | ---------------------------------------------------------------------------------------- | ------------------------------- | -------------------------------------------------------------- | ------------ |\n| placeholder           | 输入框占位文本                                                                           | string                          | —                                                              | —            |\n| disabled              | 禁用                                                                                     | boolean                         | —                                                              | false        |\n| value-key             | 输入建议对象中用于显示的键名                                                             | string                          | —                                                              | value        |\n| value                 | 必填值，输入绑定值                                                                       | string                          | —                                                              | —            |\n| debounce              | 获取输入建议的去抖延时                                                                   | number                          | —                                                              | 300          |\n| placement             | 菜单弹出位置                                                                             | string                          | top / top-start / top-end / bottom / bottom-start / bottom-end | bottom-start |\n| fetch-suggestions     | 返回输入建议的方法，仅当你的输入建议数据 resolve 时，通过调用 callback(data:[]) 来返回它 | Function(queryString, callback) | —                                                              | —            |\n| popper-class          | Autocomplete 下拉列表的类名                                                              | string                          | —                                                              | —            |\n| trigger-on-focus      | 是否在输入框 focus 时显示建议列表                                                        | boolean                         | —                                                              | true         |\n| name                  | 原生属性                                                                                 | string                          | —                                                              | —            |\n| select-when-unmatched | 在输入没有任何匹配建议的情况下，按下回车是否触发 `select` 事件                           | boolean                         | —                                                              | false        |\n| label                 | 输入框关联的 label 文字                                                                  | string                          | —                                                              | —            |\n| prefix-icon           | 输入框头部图标                                                                           | string                          | —                                                              | —            |\n| suffix-icon           | 输入框尾部图标                                                                           | string                          | —                                                              | —            |\n| hide-loading          | 是否隐藏远程加载时的加载图标                                                             | boolean                         | —                                                              | false        |\n| popper-append-to-body | 是否将下拉列表插入至 body 元素。在下拉列表的定位出现问题时，可将该属性设置为 false       | boolean                         | -                                                              | true         |\n| highlight-first-item  | 是否默认突出显示远程搜索建议中的第一项                                                   | boolean                         | —                                                              | false        |\n\n### Autocomplete Slots\n\n| name    | 说明           |\n| ------- | -------------- |\n| prefix  | 输入框头部内容 |\n| suffix  | 输入框尾部内容 |\n| prepend | 输入框前置内容 |\n| append  | 输入框后置内容 |\n\n### Autocomplete Scoped Slot\n\n| name | 说明                            |\n| ---- | ------------------------------- |\n| —    | 自定义输入建议，参数为 { item } |\n\n### Autocomplete Events\n\n| 事件名称 | 说明                  | 回调参数                  |\n| -------- | --------------------- | ------------------------- |\n| select   | 点击选中建议项时触发  | 选中建议项                |\n| change   | 在 Input 值改变时触发 | (value: string \\| number) |\n\n### Autocomplete Methods\n\n| 方法名 | 说明              | 参数 |\n| ------ | ----------------- | ---- |\n| focus  | 使 input 获取焦点 | -    |\n',m=Object(u["b"])(t=function(n){Object(r["a"])(a,n);var e=Object(d["a"])(a);function a(n){var t;return Object(o["a"])(this,a),t=e.call(this,n),Object(s["a"])(Object(i["a"])(t),"value",c),t}return Object(l["a"])(a)}(p["a"]))||t;e["default"]=m}}]);