(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["PaTreeClass"],{d258:function(e,n,a){"use strict";a.r(n);var d,t=a("bee2"),o=a("d4ec"),l=a("257e"),r=a("262e"),c=a("2caf"),s=a("ade3"),i=a("8d35"),f=a("2fe1"),u="# Tree 树\n\n### 基本用法\n\n:::demo\n\n```html\n<template>\n  <div>\n    <pa-input placeholder=\"输入关键字进行过滤\" v-model=\"filterText\"> </pa-input>\n\n    <pa-tree\n      class=\"filter-tree\"\n      :data=\"data\"\n      :props=\"defaultProps\"\n      default-expand-all\n      :filter-node-method=\"filterNode\"\n      ref=\"tree\"\n    >\n    </pa-tree>\n  </div>\n</template>\n<script>\n  export default {\n    watch: {\n      filterText(val) {\n        this.$refs.tree.filter(val);\n      },\n    },\n\n    methods: {\n      filterNode(value, data) {\n        if (!value) return true;\n        return data.label.indexOf(value) !== -1;\n      },\n    },\n\n    data() {\n      return {\n        filterText: '',\n        data: [\n          {\n            id: 1,\n            label: '一级 1',\n            children: [\n              {\n                id: 4,\n                label: '二级 1-1',\n                children: [\n                  {\n                    id: 9,\n                    label: '三级 1-1-1',\n                  },\n                  {\n                    id: 10,\n                    label: '三级 1-1-2',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            id: 2,\n            label: '一级 2',\n            children: [\n              {\n                id: 5,\n                label: '二级 2-1',\n              },\n              {\n                id: 6,\n                label: '二级 2-2',\n              },\n            ],\n          },\n          {\n            id: 3,\n            label: '一级 3',\n            children: [\n              {\n                id: 7,\n                label: '二级 3-1',\n              },\n              {\n                id: 8,\n                label: '二级 3-2',\n              },\n            ],\n          },\n        ],\n        defaultProps: {\n          children: 'children',\n          label: 'label',\n        },\n      };\n    },\n  };\n<\/script>\n```\n\n:::\n\n### Attributes\n\n| 参数 | 说明 | 类型 | 可选值 | 默认值 |\n| --- | --- | --- | --- | --- |\n| data | 展示数据 | array | — | — |\n| empty-text | 内容为空的时候展示的文本 | String | — | — |\n| node-key | 每个树节点用来作为唯一标识的属性，整棵树应该是唯一的 | String | — | — |\n| props | 配置选项，具体看下表 | object | — | — |\n| render-after-expand | 是否在第一次展开某个树节点后才渲染其子节点 | boolean | — | true |\n| load | 加载子树数据的方法，仅当 lazy 属性为 true 时生效 | function(node, resolve) | — | — |\n| render-content | 树节点的内容区的渲染 Function | Function(h, { node, data, store } | — | — |\n| highlight-current | 是否高亮当前选中节点，默认值是 false。 | boolean | — | false |\n| default-expand-all | 是否默认展开所有节点 | boolean | — | false |\n| expand-on-click-node | 是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。 | boolean | — | true |\n| check-on-click-node | 是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。 | boolean | — | false |\n| auto-expand-parent | 展开子节点的时候是否自动展开父节点 | boolean | — | true |\n| default-expanded-keys | 默认展开的节点的 key 的数组 | array | — | — |\n| show-checkbox | 节点是否可被选择 | boolean | — | false |\n| check-strictly | 在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false | boolean | — | false |\n| default-checked-keys | 默认勾选的节点的 key 的数组 | array | — | — |\n| filter-node-method | 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏 | Function(value, data, node) | — | — |\n| accordion | 是否每次只打开一个同级树节点展开 | boolean | — | false |\n| indent | 相邻级节点间的水平缩进，单位为像素 | number | — | 16 |\n| lazy | 是否懒加载子节点，需与 load 方法结合使用 | boolean | — | false |\n| draggable | 是否开启拖拽节点功能 | boolean | — | false |\n| allow-drag | 判断节点能否被拖拽 | Function(node) | — | — |\n| allow-drop | 拖拽时判定目标节点能否被放置。`type` 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后 | Function(draggingNode, dropNode, type) | — | — |\n\n### props\n\n| 参数 | 说明 | 类型 | 可选值 | 默认值 |\n| --- | --- | --- | --- | --- |\n| label | 指定节点标签为节点对象的某个属性值 | string, function(data, node) | — | — |\n| children | 指定子树为节点对象的某个属性值 | string | — | — |\n| disabled | 指定节点选择框是否禁用为节点对象的某个属性值 | boolean, function(data, node) | — | — |\n| isLeaf | 指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效 | boolean, function(data, node) | — | — |\n\n### 方法\n\n`Tree` 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。 `Tree` 拥有如下方法：\n\n| 方法名 | 说明 | 参数 |\n| --- | --- | --- |\n| filter | 对树节点进行筛选操作 | 接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数 |\n| updateKeyChildren | 通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性 | (key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组 |\n| getCheckedNodes | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前被选中的节点所组成的数组 | (leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 `false` 2. 是否包含半选节点，默认值为 `false` |\n| setCheckedNodes | 设置目前勾选的节点，使用此方法必须设置 node-key 属性 | (nodes) 接收勾选节点数据的数组 |\n| getCheckedKeys | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前被选中的节点的 key 所组成的数组 | (leafOnly) 接收一个 boolean 类型的参数，若为 `true` 则仅返回被选中的叶子节点的 keys，默认值为 `false` |\n| setCheckedKeys | 通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性 | (keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 `true` 则仅设置叶子节点的选中状态，默认值为 `false` |\n| setChecked | 通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性 | (key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false |\n| getHalfCheckedNodes | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前半选中的节点所组成的数组 | - |\n| getHalfCheckedKeys | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前半选中的节点的 key 所组成的数组 | - |\n| getCurrentKey | 获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null | — |\n| getCurrentNode | 获取当前被选中节点的 node，若没有节点被选中则返回 null | — |\n| setCurrentKey | 通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性 | (key) 待被选节点的 key，若为 null 则取消当前高亮的节点 |\n| setCurrentNode | 通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性 | (node) 待被选节点的 node |\n| getNode | 根据 data 或者 key 拿到 Tree 组件中的 node | (data) 要获得 node 的 key 或者 data |\n| remove | 删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性 | (data) 要删除的节点的 data 或者 node |\n| append | 为 Tree 中的一个节点追加一个子节点 | (data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node |\n| insertBefore | 为 Tree 的一个节点的前面增加一个节点 | (data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node |\n| insertAfter | 为 Tree 的一个节点的后面增加一个节点 | (data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node |\n\n### Events\n\n| 事件名称 | 说明 | 回调参数 |\n| --- | --- | --- |\n| node-click | 节点被点击时的回调 | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。 |\n| node-contextmenu | 当某一节点被鼠标右键点击时会触发该事件 | 共四个参数，依次为：event、传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。 |\n| check-change | 节点选中状态发生变化时的回调 | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点 |\n| check | 当复选框被点击的时候触发 | 共两个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性 |\n| current-change | 当前选中节点变化时触发的事件 | 共两个参数，依次为：当前节点的数据，当前节点的 Node 对象 |\n| node-expand | 节点被展开时触发的事件 | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身 |\n| node-collapse | 节点被关闭时触发的事件 | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身 |\n| node-drag-start | 节点开始拖拽时触发的事件 | 共两个参数，依次为：被拖拽节点对应的 Node、event |\n| node-drag-enter | 拖拽进入其他节点时触发的事件 | 共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event |\n| node-drag-leave | 拖拽离开某个节点时触发的事件 | 共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event |\n| node-drag-over | 在拖拽节点时触发的事件（类似浏览器的 mouseover 事件） | 共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event |\n| node-drag-end | 拖拽结束时（可能未成功）触发的事件 | 共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event |\n| node-drop | 拖拽成功完成时触发的事件 | 共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event |\n\n### Scoped Slot\n\n| name | 说明                                      |\n| ---- | ----------------------------------------- |\n| —    | 自定义树节点的内容，参数为 { node, data } |\n",k=Object(f["b"])(d=function(e){Object(r["a"])(a,e);var n=Object(c["a"])(a);function a(e){var d;return Object(o["a"])(this,a),d=n.call(this,e),Object(s["a"])(Object(l["a"])(d),"value",u),d}return Object(t["a"])(a)}(i["a"]))||d;n["default"]=k}}]);